[["Map",1,2,7,8,81,82],"meta::meta",["Map",3,4,5,6],"astro-version","5.12.8","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[[null,{\"content\":{\"type\":\"text\",\"value\":\" üîó\"}}],null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","framer",["Map",9,10,41,42,63,64],"fieldwave",{"id":9,"data":11,"filePath":31,"digest":32,"rendered":33,"legacyId":40},{"title":12,"subtitle":13,"description":14,"note":15,"linkBuy":16,"preview":16,"cover":17,"swap":18,"galleryImg1":18,"galleryImg2":18,"author":19,"slug":9,"type":22,"pages":23,"price":24,"published":25,"featured":25,"stack":26,"updated":27,"category":28},"Fieldwave  - Coming soon","Versatile agency layout for bold brands","A clean, responsive portfolio Framer template perfect for freelancers and creatives.","Fraction of agency cost",null,"cover.webp","coming-soon.png",{"name":20,"avatar":21},"Leandro Ubilla","leandro-profile.png","new",3,49,true,"Framer",["Date","2025-07-15T00:00:00.000Z"],{"label":29,"slug":30},"Agency","agency","src/content/framer/fieldwave.md","7cfb270f2c9cd563",{"html":34,"metadata":35},"",{"headings":36,"localImagePaths":37,"remoteImagePaths":38,"frontmatter":11,"imagePaths":39},[],[],[],[],"fieldwave.md","strata",{"id":41,"data":43,"filePath":54,"digest":55,"rendered":56,"legacyId":62},{"linkBuy":16,"preview":16,"cover":17,"swap":18,"galleryImg1":18,"galleryImg2":18,"title":44,"subtitle":45,"description":46,"note":15,"author":47,"slug":41,"type":22,"pages":48,"price":49,"published":25,"featured":25,"stack":26,"updated":50,"category":51},"Strata - Coming soon","This is the subtitle","A fast, modern Framer template for SaaS startups looking to launch with impact.",{"name":20,"avatar":21},7,0,["Date","2025-07-15T00:00:00.000Z"],{"label":52,"slug":53},"Real Estate","real-estate","src/content/framer/strata.md","913acbfc7727294a",{"html":34,"metadata":57},{"headings":58,"localImagePaths":59,"remoteImagePaths":60,"frontmatter":43,"imagePaths":61},[],[],[],[],"strata.md","summerstone",{"id":63,"data":65,"filePath":72,"digest":73,"rendered":74,"legacyId":80},{"title":66,"subtitle":67,"description":14,"note":15,"linkBuy":16,"preview":16,"cover":17,"swap":18,"galleryImg1":18,"galleryImg2":18,"author":68,"slug":63,"type":22,"pages":23,"price":69,"published":25,"featured":25,"stack":26,"updated":70,"category":71},"Summerstone  - Coming soon","A professional-grade portfolio layout",{"name":20,"avatar":21},99,["Date","2025-07-15T00:00:00.000Z"],{"label":52,"slug":53},"src/content/framer/summerstone.md","7dd4da79ee777ace",{"html":34,"metadata":75},{"headings":76,"localImagePaths":77,"remoteImagePaths":78,"frontmatter":65,"imagePaths":79},[],[],[],[],"summerstone.md","blog",["Map",83,84,140,141,165,166,196,197,255,256,295,296,334,335],"how-to-add-a-blog-to-your-framer-project",{"id":83,"data":85,"body":92,"filePath":93,"digest":94,"rendered":95,"legacyId":139},{"author":20,"avatar":86,"image":17,"title":87,"description":88,"date":89,"category":90,"slug":83,"tags":91,"published":25,"featured":25,"pinned":25},"leandro-ubilla.webp","How to Add a Blog to Your Framer Project","Learn how to add a fully functional blog to your Framer site from scratch.",["Date","2025-07-23T00:00:00.000Z"],{"label":26,"slug":7},[26],"## Table of Contents\n\n- [How to add a blog to a blank project](#how-to-add-a-blog-to-a-blank-project)  \n- [How to add a blog to a project with the CMS already set up](#how-to-add-a-blog-to-a-project-with-the-cms-already-set-up)\n\n\n## Starting with a blank Framer project? No problem.\n\nIf your template doesn‚Äôt include a blog by default, you'll need to set things up manually. That means creating your own CMS items from scratch, but don‚Äôt worry, it‚Äôs simpler than it sounds.\n\nIn this quick guide, I‚Äôll walk you through how to add a blog to any Framer site, even if your starting point is completely empty.\n\n![Framer add blog button](/media/blog/how-to-add-a-blog-to-your-framer-project/1.webp)\n\nWe‚Äôre starting with a blank canvas.\nHead over to the CMS panel and click ‚ÄúAdd Blog.‚Äù\nFramer will automatically create two collections for you:\none for your blog posts, and one for blog categories.\n\n## Why Are Categories and Blog Posts Stored Separately?\n\nWhen building a blog or CMS, you‚Äôll often see that categories and blog posts are managed as separate collections. Here‚Äôs why:\n\n### Better Organization & Reusability  \nCategories act like labels or folders for your posts. By keeping them separate, you can easily add, edit, or remove categories without touching individual blog posts.  \nThis means if you want to rename or restructure a category, you do it once, and all posts under that category update automatically.\n\n### Faster Queries & Performance  \nSeparating categories allows the system to fetch posts and categories independently.  \nFor example, when showing a list of categories, the CMS doesn‚Äôt have to scan through every post, improving speed and scalability.\n\n### Cleaner Data Structure  \nPosts contain their own content, metadata, images, and links. Categories are simpler objects with just a name and maybe a description or slug.  \nSeparating these keeps your database or content files cleaner and easier to maintain.\n\n### More Flexibility in Design & Filtering  \nSince categories are their own entities, you can build dynamic filters, menus, or tag clouds that update based on category data, without needing to parse through posts every time.\n\nAnd now we get 4 categories and 5 blog posts\n\n![Blog posts and categories created for us by Framer](/media/blog/how-to-add-a-blog-to-your-framer-project/2.webp)\n\nNow, if we click **Back**, we can see this:\n\n![Framer left menu showing the pages list](/media/blog/how-to-add-a-blog-to-your-framer-project/3.webp)\n\n## After Creating the Blog\n\nOnce you create your blog CMS collection in Framer, your site structure automatically expands. You get:\n\n- **Home** ‚Äì Your main landing page, the front door of your site.\n\n- **/blog** ‚Äì A dynamic CMS route that lists all your articles. This is the URL where all your articles will be shown, for example, `yourdomain.com/blog`.\n\nAnd under `/blog`, you'll see something like:\n\n- **Articles ‚Ä¢ 5** ‚Äì This shows you have 5 blog posts in your CMS, each one pulling from your collection.\n\n‚úÖ Clean structure  \n‚úÖ SEO-ready  \n‚úÖ Scalable as hell\n\nNow you're set to start dropping knowledge bombs.\n\n## How to add a blog to a project with the CMS already set up\n\nIf you're using a template or working on a project where the CMS is already set up, you might not see the Add Blog button in the CMS panel. In that case, there's a simple workaround.\n\n![Framer left menu no new blog option](/media/blog/how-to-add-a-blog-to-your-framer-project/16.webp)\n\nGo back to the Framer dashboard, create a new blank project, and follow the same steps to add a blog. Once it's created, you can copy the CMS structure into your main project.\n\n![Framer dashboard new project](/media/blog/how-to-add-a-blog-to-your-framer-project/15.webp)\n\nWith this new blank project open, create a new blog by following the steps from the first section of this post.\n\nNext, head over to the CMS tab.\n\n![Framer dashboard CMS tab](/media/blog/how-to-add-a-blog-to-your-framer-project/5.webp)\n\nIn the CMS tab, right-click **Articles** and choose **Copy**.\n\n![Framer dashboard copy collection](/media/blog/how-to-add-a-blog-to-your-framer-project/4.webp)\n\nGo to the Framer dashboard and open your target project. In my case, I‚Äôm using the one from the micro animations tutorial.\n\n![Framer dashboard project](/media/blog/how-to-add-a-blog-to-your-framer-project/19.webp)\n\nIn the CMS tab, right-click anywhere on the left panel (don‚Äôt click on any of the collections) and choose Paste.\nCategories will be included automatically, no need to copy them separately.\n\n![Framer dashboard paste collection](/media/blog/how-to-add-a-blog-to-your-framer-project/17.webp)\n\nAs you can see, all the data has been copied from the other project into this one, so you don‚Äôt have to waste time setting up all the fields for your Blog or Categories collections.\n\n![Framer dashboard articles and categories collections](/media/blog/how-to-add-a-blog-to-your-framer-project/18.webp)\n\n## ‚úÖ Done. What‚Äôs Next?\n\nAs you can see, you just saved a ton of time.\n\nNo rebuilding collections. No messing with field types. No wondering what you forgot.\n\nYou‚Äôve now got a fully functional blog, complete with posts, categories, and a clean URL structure, ready to go.\n\n### This gives you:\n\nA scalable setup you can keep adding to\n\nBetter SEO right out of the gate\n\nLess time fiddling, more time publishing\n\n### Next step? Start writing.\n\nEven if it‚Äôs just one article a week, it compounds.\n\nYour blog is now a growth engine. Don‚Äôt let it sit idle.","src/content/blog/how-to-add-a-blog-to-your-framer-project.md","767265ed09835e41",{"html":96,"metadata":97},"\u003Ch2 id=\"table-of-contents\">Table of Contents\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#how-to-add-a-blog-to-a-blank-project\">How to add a blog to a blank project\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#how-to-add-a-blog-to-a-project-with-the-cms-already-set-up\">How to add a blog to a project with the CMS already set up\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"starting-with-a-blank-framer-project-no-problem\">Starting with a blank Framer project? No problem.\u003C/h2>\n\u003Cp>If your template doesn‚Äôt include a blog by default, you‚Äôll need to set things up manually. That means creating your own CMS items from scratch, but don‚Äôt worry, it‚Äôs simpler than it sounds.\u003C/p>\n\u003Cp>In this quick guide, I‚Äôll walk you through how to add a blog to any Framer site, even if your starting point is completely empty.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/1.webp\" alt=\"Framer add blog button\">\u003C/p>\n\u003Cp>We‚Äôre starting with a blank canvas.\nHead over to the CMS panel and click ‚ÄúAdd Blog.‚Äù\nFramer will automatically create two collections for you:\none for your blog posts, and one for blog categories.\u003C/p>\n\u003Ch2 id=\"why-are-categories-and-blog-posts-stored-separately\">Why Are Categories and Blog Posts Stored Separately?\u003C/h2>\n\u003Cp>When building a blog or CMS, you‚Äôll often see that categories and blog posts are managed as separate collections. Here‚Äôs why:\u003C/p>\n\u003Ch3 id=\"better-organization--reusability\">Better Organization &#x26; Reusability\u003C/h3>\n\u003Cp>Categories act like labels or folders for your posts. By keeping them separate, you can easily add, edit, or remove categories without touching individual blog posts.\u003Cbr>\nThis means if you want to rename or restructure a category, you do it once, and all posts under that category update automatically.\u003C/p>\n\u003Ch3 id=\"faster-queries--performance\">Faster Queries &#x26; Performance\u003C/h3>\n\u003Cp>Separating categories allows the system to fetch posts and categories independently.\u003Cbr>\nFor example, when showing a list of categories, the CMS doesn‚Äôt have to scan through every post, improving speed and scalability.\u003C/p>\n\u003Ch3 id=\"cleaner-data-structure\">Cleaner Data Structure\u003C/h3>\n\u003Cp>Posts contain their own content, metadata, images, and links. Categories are simpler objects with just a name and maybe a description or slug.\u003Cbr>\nSeparating these keeps your database or content files cleaner and easier to maintain.\u003C/p>\n\u003Ch3 id=\"more-flexibility-in-design--filtering\">More Flexibility in Design &#x26; Filtering\u003C/h3>\n\u003Cp>Since categories are their own entities, you can build dynamic filters, menus, or tag clouds that update based on category data, without needing to parse through posts every time.\u003C/p>\n\u003Cp>And now we get 4 categories and 5 blog posts\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/2.webp\" alt=\"Blog posts and categories created for us by Framer\">\u003C/p>\n\u003Cp>Now, if we click \u003Cstrong>Back\u003C/strong>, we can see this:\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/3.webp\" alt=\"Framer left menu showing the pages list\">\u003C/p>\n\u003Ch2 id=\"after-creating-the-blog\">After Creating the Blog\u003C/h2>\n\u003Cp>Once you create your blog CMS collection in Framer, your site structure automatically expands. You get:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Home\u003C/strong> ‚Äì Your main landing page, the front door of your site.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>/blog\u003C/strong> ‚Äì A dynamic CMS route that lists all your articles. This is the URL where all your articles will be shown, for example, \u003Ccode>yourdomain.com/blog\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>And under \u003Ccode>/blog\u003C/code>, you‚Äôll see something like:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Articles ‚Ä¢ 5\u003C/strong> ‚Äì This shows you have 5 blog posts in your CMS, each one pulling from your collection.\u003C/li>\n\u003C/ul>\n\u003Cp>‚úÖ Clean structure\u003Cbr>\n‚úÖ SEO-ready\u003Cbr>\n‚úÖ Scalable as hell\u003C/p>\n\u003Cp>Now you‚Äôre set to start dropping knowledge bombs.\u003C/p>\n\u003Ch2 id=\"how-to-add-a-blog-to-a-project-with-the-cms-already-set-up\">How to add a blog to a project with the CMS already set up\u003C/h2>\n\u003Cp>If you‚Äôre using a template or working on a project where the CMS is already set up, you might not see the Add Blog button in the CMS panel. In that case, there‚Äôs a simple workaround.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/16.webp\" alt=\"Framer left menu no new blog option\">\u003C/p>\n\u003Cp>Go back to the Framer dashboard, create a new blank project, and follow the same steps to add a blog. Once it‚Äôs created, you can copy the CMS structure into your main project.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/15.webp\" alt=\"Framer dashboard new project\">\u003C/p>\n\u003Cp>With this new blank project open, create a new blog by following the steps from the first section of this post.\u003C/p>\n\u003Cp>Next, head over to the CMS tab.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/5.webp\" alt=\"Framer dashboard CMS tab\">\u003C/p>\n\u003Cp>In the CMS tab, right-click \u003Cstrong>Articles\u003C/strong> and choose \u003Cstrong>Copy\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/4.webp\" alt=\"Framer dashboard copy collection\">\u003C/p>\n\u003Cp>Go to the Framer dashboard and open your target project. In my case, I‚Äôm using the one from the micro animations tutorial.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/19.webp\" alt=\"Framer dashboard project\">\u003C/p>\n\u003Cp>In the CMS tab, right-click anywhere on the left panel (don‚Äôt click on any of the collections) and choose Paste.\nCategories will be included automatically, no need to copy them separately.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/17.webp\" alt=\"Framer dashboard paste collection\">\u003C/p>\n\u003Cp>As you can see, all the data has been copied from the other project into this one, so you don‚Äôt have to waste time setting up all the fields for your Blog or Categories collections.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/18.webp\" alt=\"Framer dashboard articles and categories collections\">\u003C/p>\n\u003Ch2 id=\"-done-whats-next\">‚úÖ Done. What‚Äôs Next?\u003C/h2>\n\u003Cp>As you can see, you just saved a ton of time.\u003C/p>\n\u003Cp>No rebuilding collections. No messing with field types. No wondering what you forgot.\u003C/p>\n\u003Cp>You‚Äôve now got a fully functional blog, complete with posts, categories, and a clean URL structure, ready to go.\u003C/p>\n\u003Ch3 id=\"this-gives-you\">This gives you:\u003C/h3>\n\u003Cp>A scalable setup you can keep adding to\u003C/p>\n\u003Cp>Better SEO right out of the gate\u003C/p>\n\u003Cp>Less time fiddling, more time publishing\u003C/p>\n\u003Ch3 id=\"next-step-start-writing\">Next step? Start writing.\u003C/h3>\n\u003Cp>Even if it‚Äôs just one article a week, it compounds.\u003C/p>\n\u003Cp>Your blog is now a growth engine. Don‚Äôt let it sit idle.\u003C/p>",{"headings":98,"localImagePaths":136,"remoteImagePaths":137,"frontmatter":85,"imagePaths":138},[99,103,106,109,112,115,118,121,124,127,130,133],{"depth":100,"slug":101,"text":102},2,"table-of-contents","Table of Contents",{"depth":100,"slug":104,"text":105},"starting-with-a-blank-framer-project-no-problem","Starting with a blank Framer project? No problem.",{"depth":100,"slug":107,"text":108},"why-are-categories-and-blog-posts-stored-separately","Why Are Categories and Blog Posts Stored Separately?",{"depth":23,"slug":110,"text":111},"better-organization--reusability","Better Organization & Reusability",{"depth":23,"slug":113,"text":114},"faster-queries--performance","Faster Queries & Performance",{"depth":23,"slug":116,"text":117},"cleaner-data-structure","Cleaner Data Structure",{"depth":23,"slug":119,"text":120},"more-flexibility-in-design--filtering","More Flexibility in Design & Filtering",{"depth":100,"slug":122,"text":123},"after-creating-the-blog","After Creating the Blog",{"depth":100,"slug":125,"text":126},"how-to-add-a-blog-to-a-project-with-the-cms-already-set-up","How to add a blog to a project with the CMS already set up",{"depth":100,"slug":128,"text":129},"-done-whats-next","‚úÖ Done. What‚Äôs Next?",{"depth":23,"slug":131,"text":132},"this-gives-you","This gives you:",{"depth":23,"slug":134,"text":135},"next-step-start-writing","Next step? Start writing.",[],[],[],"how-to-add-a-blog-to-your-framer-project.md","my-first-two-weeks-making-coding-videos",{"id":140,"data":142,"body":151,"filePath":152,"digest":153,"rendered":154,"legacyId":164},{"author":20,"avatar":86,"image":17,"title":143,"description":144,"date":145,"tags":146,"slug":140,"published":25,"featured":150,"pinned":150},"My First Two Weeks Making Coding YouTube Videos","In this post, I share the highs and lows of my first two weeks as a YouTube content creator. From struggling with thumbnails to improving audio quality üé¨",["Date","2024-10-17T00:00:00.000Z"],[147,148,149],"Content Creation","YouTube","Journey",false,"## Content Creator's Log, Stardate: 2024.10.17. The mission to grow a YouTube channel continues... no sign of views, but the journey goes on.\n\nThe first few weeks were tough. My first video took way longer than expected. \n\nI had to learn how to make thumbnails üé®, and I didn&apos;t realize it was something that required so much time. \n\nThe audio in my videos still sounds pretty bad, especially the first one, which is over 20 minutes long üéß. \n\nRecently, for my fourth video, I learned how to clean up the audio with Audacity üéôÔ∏è. \n\nNow, it sounds a lot better‚Äînormalizing, reducing the echo, and boosting the volume in Kdenlive because it was too quiet. \n\nAs comrade Anatoly Dyatlov would say: Not great, not terrible üí¨.\n\n![Anatoly Dyatlov: Not great, not terrible](/media/blog/my-first-two-weeks-making-coding-videos/dyatlov.webp)\n\nThere&apos;s still room for improvement, though.\n\nThe channel&apos;s analytics üìä are really poor. I knew it was going to be hard, but not this hard. \n\nAt this rate, I&apos;ll reach monetization by the time I retire üòÖ.\n\nMy last video about localStorage was seen by 2 people, and one of them was me üòÇ. \n\nAnyway, time to go back to editing, pretending I have an audience. See you in the next log, if anyone‚Äôs out there.","src/content/blog/my-first-two-weeks-as-a-content-creator copy.md","dac4b40d5f9080c7",{"html":155,"metadata":156},"\u003Ch2 id=\"content-creators-log-stardate-20241017-the-mission-to-grow-a-youtube-channel-continues-no-sign-of-views-but-the-journey-goes-on\">Content Creator‚Äôs Log, Stardate: 2024.10.17. The mission to grow a YouTube channel continues‚Ä¶ no sign of views, but the journey goes on.\u003C/h2>\n\u003Cp>The first few weeks were tough. My first video took way longer than expected.\u003C/p>\n\u003Cp>I had to learn how to make thumbnails üé®, and I didn‚Äôt realize it was something that required so much time.\u003C/p>\n\u003Cp>The audio in my videos still sounds pretty bad, especially the first one, which is over 20 minutes long üéß.\u003C/p>\n\u003Cp>Recently, for my fourth video, I learned how to clean up the audio with Audacity üéôÔ∏è.\u003C/p>\n\u003Cp>Now, it sounds a lot better‚Äînormalizing, reducing the echo, and boosting the volume in Kdenlive because it was too quiet.\u003C/p>\n\u003Cp>As comrade Anatoly Dyatlov would say: Not great, not terrible üí¨.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/my-first-two-weeks-making-coding-videos/dyatlov.webp\" alt=\"Anatoly Dyatlov: Not great, not terrible\">\u003C/p>\n\u003Cp>There‚Äôs still room for improvement, though.\u003C/p>\n\u003Cp>The channel‚Äôs analytics üìä are really poor. I knew it was going to be hard, but not this hard.\u003C/p>\n\u003Cp>At this rate, I‚Äôll reach monetization by the time I retire üòÖ.\u003C/p>\n\u003Cp>My last video about localStorage was seen by 2 people, and one of them was me üòÇ.\u003C/p>\n\u003Cp>Anyway, time to go back to editing, pretending I have an audience. See you in the next log, if anyone‚Äôs out there.\u003C/p>",{"headings":157,"localImagePaths":161,"remoteImagePaths":162,"frontmatter":142,"imagePaths":163},[158],{"depth":100,"slug":159,"text":160},"content-creators-log-stardate-20241017-the-mission-to-grow-a-youtube-channel-continues-no-sign-of-views-but-the-journey-goes-on","Content Creator‚Äôs Log, Stardate: 2024.10.17. The mission to grow a YouTube channel continues‚Ä¶ no sign of views, but the journey goes on.",[],[],[],"my-first-two-weeks-as-a-content-creator copy.md","why-mapping-api-data-is-crucial",{"id":165,"data":167,"body":173,"filePath":174,"digest":175,"rendered":176,"legacyId":195},{"author":20,"avatar":86,"image":17,"title":168,"description":169,"date":170,"tags":171,"slug":165,"published":25,"featured":150,"pinned":150},"Why Mapping API Data is Crucial for Web Development","This post walks you through a basic mapping function that will streamline your data handling.",["Date","2024-05-10T00:00:00.000Z"],[172],"JavaScript","Mapping data from an API is an essential step for several reasons, \nespecially when you're dealing with web development and interacting \nwith third-party services. Here's why:\n\n## 1. Clean and Consistent Data Structure\n\nHere's the deal: When you're pulling data from an API, it's not always in the format you need.\n\nSometimes, APIs return bloated, nested objects with way more information than you care about. \n\nThat's where mapping comes in. \n\nFor instance, let's look at some user data from [https://fakestoreapi.com/](https://fakestoreapi.com/)\n\nWe are gonna get some user data, but mapped it in a way that some of the user data gets lefted out.\n\nWhen you hit this endpoint https://fakestoreapi.com/users you get a list of users with all sorts of info. \nHere's an example of one user object:\n\n```js showLineNumbers\n[\n   {\n      \"address\": {\n         \"geolocation\": {\n            \"lat\": \"-37.3159\",\n            \"long\": \"81.1496\"\n         },\n         \"city\": \"kilcoole\",\n         \"street\": \"new road\",\n         \"number\": 7682,\n         \"zipcode\": \"12926-3874\"\n      },\n      \"id\": 1,\n      \"email\": \"john@gmail.com\",\n      \"username\": \"johnd\",\n      \"password\": \"m38rmF$\",\n      \"name\": {\n         \"firstname\": \"john\",\n         \"lastname\": \"doe\"\n      },\n      \"phone\": \"1-570-236-7033\",\n      \"__v\": 0\n   }\n]\n```\n\nLet's define the type of the user\n\n```js showLineNumbers\ntype User = {\n  address: {\n    city: string;\n    street: string;\n    number: number;\n    zipcode: string;\n  };\n  id: number;\n  email: string;\n  username: string;\n  name: {\n    firstname: string;\n    lastname: string;\n  };\n  phone: string;\n};\n```\n\nAnd this is the type for the filtered user. ***USE TYPESCRIPT*** üëà\n\n```js showLineNumbers\ntype FilteredUser = {\n  id: string;\n  email: string;\n  username: string;\n  name: {\n    firstname: string;\n    lastname: string;\n  };\n  address: {\n    city: string;\n    street: string;\n    zipcode: string;\n  };\n};\n```\n\nThis is the function for mapping the user data\n\n```js showLineNumbers\n// Function to filter out unwanted fields\nfunction filterUserData(users: User[]): FilteredUser[] {\n  return users.map(({ id, email, username, name, address }) => ({\n    id: '' + id, // number to string\n    email,\n    username,\n    name: {\n      firstname: name.firstname,\n      lastname: name.lastname,\n    },\n    address: {\n      city: address.city,\n      street: address.street,\n      zipcode: address.zipcode,\n    },\n  }));\n}\n```\n\n## 2. Decoupling\n\nSometimes, APIs change.\n\nWhen that happens, do you want to rewrite your entire app? Nope.\n\nWith mapped data, you're decoupling your app from the API. \n\nIf the API response changes, you just tweak your mapping logic instead of ripping apart \nyour whole codebase.\n\n**Save yourself from a world of pain.**\n\n![You are entering a world of pain - Walter - The big lebowsky](/media/blog/why-mapping-api-data-is-crucial/world-of-pain-walter-min.png)\n\nIf the API changes its response structure or fields, you can adjust the mapping \nlogic rather than **refactoring the entire app**.\n\n## 3. Performance\n\nMore data = more problems. \n\nBy mapping your data, you cut down on the size of the payload you're passing around. \n\nThis boosts performance and makes your app faster.\n\nInstead of dragging around unnecessary fields, just map what you need.\n\n## 4. Error Handling: Catch Errors Before They Wreak Havoc\n\nWhen mapping, you can intercept missing fields or errors in the API response. \n\nThat way, you can fix them before they break your app and ruin the user experience.","src/content/blog/why-mapping-api-data-is-crucial.md","a765d394fb051d5c",{"html":177,"metadata":178},"\u003Cp>Mapping data from an API is an essential step for several reasons,\nespecially when you‚Äôre dealing with web development and interacting\nwith third-party services. Here‚Äôs why:\u003C/p>\n\u003Ch2 id=\"1-clean-and-consistent-data-structure\">1. Clean and Consistent Data Structure\u003C/h2>\n\u003Cp>Here‚Äôs the deal: When you‚Äôre pulling data from an API, it‚Äôs not always in the format you need.\u003C/p>\n\u003Cp>Sometimes, APIs return bloated, nested objects with way more information than you care about.\u003C/p>\n\u003Cp>That‚Äôs where mapping comes in.\u003C/p>\n\u003Cp>For instance, let‚Äôs look at some user data from \u003Ca href=\"https://fakestoreapi.com/\" rel=\"nofollow\">https://fakestoreapi.com/\u003Cspan> üîó\u003C/span>\u003C/a>\u003C/p>\n\u003Cp>We are gonna get some user data, but mapped it in a way that some of the user data gets lefted out.\u003C/p>\n\u003Cp>When you hit this endpoint \u003Ca href=\"https://fakestoreapi.com/users\" rel=\"nofollow\">https://fakestoreapi.com/users\u003Cspan> üîó\u003C/span>\u003C/a> you get a list of users with all sorts of info.\nHere‚Äôs an example of one user object:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"address\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"geolocation\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"lat\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-37.3159\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"long\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"81.1496\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">         },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"city\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"kilcoole\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"street\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"new road\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"number\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">7682\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"zipcode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"12926-3874\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"john@gmail.com\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"username\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"johnd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"password\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"m38rmF$\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"firstname\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"john\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"lastname\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"doe\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"phone\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1-570-236-7033\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"__v\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Let‚Äôs define the type of the user\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  address\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    city\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    street\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    number\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    zipcode\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  email\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  username\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  name\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    firstname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    lastname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  phone\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>And this is the type for the filtered user. \u003Cem>\u003Cstrong>USE TYPESCRIPT\u003C/strong>\u003C/em> üëà\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> FilteredUser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  email\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  username\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  name\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    firstname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    lastname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  address\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    city\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    street\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    zipcode\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>This is the function for mapping the user data\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Function to filter out unwanted fields\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> filterUserData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">users\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[])\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FilteredUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">email\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">username\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">address\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id, \u003C/span>\u003Cspan style=\"color:#6A737D\">// number to string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    email,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    name: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      firstname: name.firstname,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      lastname: name.lastname,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    address: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      city: address.city,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      street: address.street,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      zipcode: address.zipcode,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch2 id=\"2-decoupling\">2. Decoupling\u003C/h2>\n\u003Cp>Sometimes, APIs change.\u003C/p>\n\u003Cp>When that happens, do you want to rewrite your entire app? Nope.\u003C/p>\n\u003Cp>With mapped data, you‚Äôre decoupling your app from the API.\u003C/p>\n\u003Cp>If the API response changes, you just tweak your mapping logic instead of ripping apart\nyour whole codebase.\u003C/p>\n\u003Cp>\u003Cstrong>Save yourself from a world of pain.\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/why-mapping-api-data-is-crucial/world-of-pain-walter-min.png\" alt=\"You are entering a world of pain - Walter - The big lebowsky\">\u003C/p>\n\u003Cp>If the API changes its response structure or fields, you can adjust the mapping\nlogic rather than \u003Cstrong>refactoring the entire app\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"3-performance\">3. Performance\u003C/h2>\n\u003Cp>More data = more problems.\u003C/p>\n\u003Cp>By mapping your data, you cut down on the size of the payload you‚Äôre passing around.\u003C/p>\n\u003Cp>This boosts performance and makes your app faster.\u003C/p>\n\u003Cp>Instead of dragging around unnecessary fields, just map what you need.\u003C/p>\n\u003Ch2 id=\"4-error-handling-catch-errors-before-they-wreak-havoc\">4. Error Handling: Catch Errors Before They Wreak Havoc\u003C/h2>\n\u003Cp>When mapping, you can intercept missing fields or errors in the API response.\u003C/p>\n\u003Cp>That way, you can fix them before they break your app and ruin the user experience.\u003C/p>",{"headings":179,"localImagePaths":192,"remoteImagePaths":193,"frontmatter":167,"imagePaths":194},[180,183,186,189],{"depth":100,"slug":181,"text":182},"1-clean-and-consistent-data-structure","1. Clean and Consistent Data Structure",{"depth":100,"slug":184,"text":185},"2-decoupling","2. Decoupling",{"depth":100,"slug":187,"text":188},"3-performance","3. Performance",{"depth":100,"slug":190,"text":191},"4-error-handling-catch-errors-before-they-wreak-havoc","4. Error Handling: Catch Errors Before They Wreak Havoc",[],[],[],"why-mapping-api-data-is-crucial.md","framer-padding-hack-update-spacing-project",{"id":196,"data":198,"body":206,"filePath":207,"digest":208,"rendered":209,"legacyId":254},{"author":20,"avatar":86,"image":17,"title":199,"description":200,"date":201,"category":202,"slug":196,"tags":203,"published":25,"featured":25,"pinned":150},"Framer Padding Hack: Update Spacing Across All Your Project in Seconds","Discover how to quickly update padding values across your entire Framer project with one simple tweak.",["Date","2025-08-11T00:00:00.000Z"],{"label":26,"slug":7},[26,204,205],"Padding","Responsive","You set padding on dozens of sections and pages in Framer. Now you want to change it everywhere. Manually updating? Nightmare.\n\nThe problem? You‚Äôre repeating yourself because Framer lacks a central system for padding variables. Every change becomes a tedious ‚Äúfind and replace‚Äù across your entire design.\n\n#### Solution 1: Spacer Component (No Code Needed)\n\nCreate an invisible Frame component that acts as a spacer with a fixed width or height. Use this instead of padding everywhere. Want to adjust spacing? Change the spacer‚Äôs size once, and every instance updates automatically.\n\nUse variants for Desktop, Tablet, and Phone to handle responsiveness.\n\n#### Solution 2: Responsive Padding Code Override (Advanced)\n\nAdd code overrides that read padding values from global `window` variables. Change the value in the `window` object once, and the padding updates instantly on the linked element across your project.\n\nDon‚Äôt worry if you can‚Äôt code, I‚Äôll explain every step, and ChatGPT‚Äôs got your back.\n\nThis way you save time, avoid errors, and keep your designs consistent without hunting down every padding instance.\n\n## Solution 1: Spacer Component (No Code Needed)\n\nI want to centralize the padding of my Sections, so when I want to change it in the rest of my pages, and for every breakpoint, I only have to do it once.\n\n### Step 1: Create a Spacer Component (Visual Padding Control)\n\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-27-56-image.webp)\n\n- Make a new **empty Frame** component called `Spacer`.\n\n- Set its default width (or height) to whatever base spacing you want.\n\n- No background color, no border, just an invisible box.\n\n- Save it as a reusable component.\n\n> **Pro tip:** Use different Spacer variants for horizontal and vertical spacing if you want, name them Desktop, Tablet and \n\n## Step 2: Use Spacer Components Instead of Padding\n\n- Wherever you want padding inside your layouts or components, **drag in your `Spacer` component**.\n\n- For horizontal padding, place Spacer frames on left/right edges.\n\n- For vertical padding, place Spacer frames on top/bottom edges.\n\n- Now, adjusting padding means **editing the Spacer component‚Äôs width or height once**, and it updates everywhere.\n  \n  Here you can see it in action: my Section is a stack with side-by-side elements, no padding or gap.\n\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-39-36-image.webp)\n\nI made the spacer components blue so you can see them clearly.\n\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-40-20-image.webp)\n\nHere are the values for the Spacers.\n\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-18-46-10-image.webp)\n\nFor each breakpoint, simply switch to the respective variant: Tablet or Phone.\n\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-50-38-image.webp)\n\n\n\n## Solution 2: Responsive Padding Code Override (Advanced)\n\nNow I'm gonna go to Assets > Code > Add code and create a New Override file for our code override solution.\n\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-19-42-25-image.webp)\n\n**Now open your file and replace the default code with this:**\n\n```ts\nimport {\n    forwardRef,\n    type ComponentType,\n    useRef,\n    useState,\n    useEffect,\n} from \"react\"\n\nconst MOBILE_WIDTH = 802\nconst TABLET_WIDTH = 1002\n\nconst PADDING = {\n    desktop: 150,\n    tablet: 72,\n    phone: 20,\n}\n\nexport function withResponsivePadding(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [padding, setPadding] = useState(PADDING.desktop)\n        const prevBreakpoint = useRef(\"desktop\")\n\n        useEffect(() => {\n            function getBreakpoint(width) {\n                if (width >= TABLET_WIDTH) return \"desktop\"\n                if (width >= MOBILE_WIDTH) return \"tablet\"\n                return \"phone\"\n            }\n\n            function updatePadding() {\n                const width = window.innerWidth\n                const currentBreakpoint = getBreakpoint(width)\n\n                if (currentBreakpoint !== prevBreakpoint.current) {\n                    prevBreakpoint.current = currentBreakpoint\n                    setPadding(PADDING[currentBreakpoint])\n                }\n            }\n\n            updatePadding()\n            window.addEventListener(\"resize\", updatePadding)\n            return () => window.removeEventListener(\"resize\", updatePadding)\n        }, [])\n\n        return (\n            \u003CComponent\n                ref={ref}\n                {...props}\n                style={{\n                    paddingLeft: padding,\n                    paddingRight: padding,\n                }}\n            />\n        )\n    })\n}\n\n```\n\nNow I'm going to select one of my Sections and link a code override to it.\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-20-00-49-image.webp)\n\n![](/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-20-01-08-image.webp)\n\nCode overrides like this run only in preview or publish mode, Framer‚Äôs canvas doesn‚Äôt execute override code, so you won‚Äôt see the padding changes live inside the editor.\n\nNow you can test it.\n\n### How the Responsive Padding Override Works\n\nThis override dynamically adjusts left and right padding on your component based on the window width.\n\nIt listens to window resize events and updates padding only when crossing defined breakpoints (`desktop`, `tablet`, `phone`) to avoid unnecessary re-renders.\n\n### Key Constants and Variables\n\n```ts\nconst MOBILE_WIDTH = 802;\nconst TABLET_WIDTH = 1002;\n\nconst PADDING = {\n  desktop: 150,\n  tablet: 72,\n  phone: 20,\n};\n```\n\n\n\n- `MOBILE_WIDTH` and `TABLET_WIDTH` define your breakpoint widths in pixels.\n\n- `PADDING` contains the padding values (in pixels) applied at each breakpoint.\n\n### Breakpoint Detection Function\n\n```ts\nfunction getBreakpoint(width) {\n  if (width >= TABLET_WIDTH) return \"desktop\";\n  if (width >= MOBILE_WIDTH) return \"tablet\";\n  return \"phone\";\n}\n```\n\n- Returns a breakpoint name based on the current window width.\n\n- You can customize these breakpoints to fit your design.\n\n### React Hook for Padding Updates\n\n```ts\nconst [padding, setPadding] = useState(PADDING.desktop);\nconst prevBreakpoint = useRef(\"desktop\");\n\nuseEffect(() => {\n  function updatePadding() {\n    const width = window.innerWidth;\n    const currentBreakpoint = getBreakpoint(width);\n\n    if (currentBreakpoint !== prevBreakpoint.current) {\n      prevBreakpoint.current = currentBreakpoint;\n      setPadding(PADDING[currentBreakpoint]);\n    }\n  }\n\n  updatePadding();\n  window.addEventListener(\"resize\", updatePadding);\n  return () => window.removeEventListener(\"resize\", updatePadding);\n}, []);\n```\n\n- Initializes padding state to desktop padding by default.\n\n- Adds a resize event listener that calls `updatePadding` on every window resize.\n\n- Updates the padding state only if the breakpoint changes (avoids redundant updates).\n\n### Applying the Padding Styles\n\n```ts\nreturn (\n  \u003CComponent\n    ref={ref}\n    {...props}\n    style={{\n      paddingLeft: padding,\n      paddingRight: padding,\n    }}\n  />\n);\n```\n\n- The calculated padding is applied inline as `paddingLeft` and `paddingRight` styles on the wrapped component.\n\n- You can add other style properties here if needed.\n\n### How to Customize\n\n- **Change padding values:** Update the numbers inside `PADDING` to control spacing on each device size.\n\n- **Adjust breakpoints:** Modify `MOBILE_WIDTH` and `TABLET_WIDTH` to your preferred pixel widths.\n\n- **Add vertical padding:** Include `paddingTop` and `paddingBottom` in the style object if you want vertical spacing too.\n\n### Important Notes\n\n- This override only works during preview and published mode; the Framer canvas does not run override code.\n\n- If you want visual feedback inside the canvas, consider static styles or placeholder components.\n\nThat‚Äôs it, a lean, flexible, responsive padding override you can use to manage horizontal spacing globally with zero extra spacer components.","src/content/blog/framer-padding-hack-update-spacing-project.md","f4a1693a24856a8e",{"html":210,"metadata":211},"\u003Cp>You set padding on dozens of sections and pages in Framer. Now you want to change it everywhere. Manually updating? Nightmare.\u003C/p>\n\u003Cp>The problem? You‚Äôre repeating yourself because Framer lacks a central system for padding variables. Every change becomes a tedious ‚Äúfind and replace‚Äù across your entire design.\u003C/p>\n\u003Ch4 id=\"solution-1-spacer-component-no-code-needed\">Solution 1: Spacer Component (No Code Needed)\u003C/h4>\n\u003Cp>Create an invisible Frame component that acts as a spacer with a fixed width or height. Use this instead of padding everywhere. Want to adjust spacing? Change the spacer‚Äôs size once, and every instance updates automatically.\u003C/p>\n\u003Cp>Use variants for Desktop, Tablet, and Phone to handle responsiveness.\u003C/p>\n\u003Ch4 id=\"solution-2-responsive-padding-code-override-advanced\">Solution 2: Responsive Padding Code Override (Advanced)\u003C/h4>\n\u003Cp>Add code overrides that read padding values from global \u003Ccode>window\u003C/code> variables. Change the value in the \u003Ccode>window\u003C/code> object once, and the padding updates instantly on the linked element across your project.\u003C/p>\n\u003Cp>Don‚Äôt worry if you can‚Äôt code, I‚Äôll explain every step, and ChatGPT‚Äôs got your back.\u003C/p>\n\u003Cp>This way you save time, avoid errors, and keep your designs consistent without hunting down every padding instance.\u003C/p>\n\u003Ch2 id=\"solution-1-spacer-component-no-code-needed-1\">Solution 1: Spacer Component (No Code Needed)\u003C/h2>\n\u003Cp>I want to centralize the padding of my Sections, so when I want to change it in the rest of my pages, and for every breakpoint, I only have to do it once.\u003C/p>\n\u003Ch3 id=\"step-1-create-a-spacer-component-visual-padding-control\">Step 1: Create a Spacer Component (Visual Padding Control)\u003C/h3>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-27-56-image.webp\" alt=\"\">\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Make a new \u003Cstrong>empty Frame\u003C/strong> component called \u003Ccode>Spacer\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Set its default width (or height) to whatever base spacing you want.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>No background color, no border, just an invisible box.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Save it as a reusable component.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>Pro tip:\u003C/strong> Use different Spacer variants for horizontal and vertical spacing if you want, name them Desktop, Tablet and\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"step-2-use-spacer-components-instead-of-padding\">Step 2: Use Spacer Components Instead of Padding\u003C/h2>\n\u003Cul>\n\u003Cli>\n\u003Cp>Wherever you want padding inside your layouts or components, \u003Cstrong>drag in your \u003Ccode>Spacer\u003C/code> component\u003C/strong>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>For horizontal padding, place Spacer frames on left/right edges.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>For vertical padding, place Spacer frames on top/bottom edges.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Now, adjusting padding means \u003Cstrong>editing the Spacer component‚Äôs width or height once\u003C/strong>, and it updates everywhere.\u003C/p>\n\u003Cp>Here you can see it in action: my Section is a stack with side-by-side elements, no padding or gap.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-39-36-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>I made the spacer components blue so you can see them clearly.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-40-20-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Here are the values for the Spacers.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-18-46-10-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>For each breakpoint, simply switch to the respective variant: Tablet or Phone.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-16-50-38-image.webp\" alt=\"\">\u003C/p>\n\u003Ch2 id=\"solution-2-responsive-padding-code-override-advanced-1\">Solution 2: Responsive Padding Code Override (Advanced)\u003C/h2>\n\u003Cp>Now I‚Äôm gonna go to Assets > Code > Add code and create a New Override file for our code override solution.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-19-42-25-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>\u003Cstrong>Now open your file and replace the default code with this:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    forwardRef,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ComponentType,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    useRef,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    useState,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    useEffect,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MOBILE_WIDTH\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 802\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLET_WIDTH\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1002\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> PADDING\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    desktop: \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    tablet: \u003C/span>\u003Cspan style=\"color:#79B8FF\">72\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    phone: \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withResponsivePadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">padding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setPadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">PADDING\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.desktop)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> prevBreakpoint\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"desktop\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getBreakpoint\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (width \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLET_WIDTH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"desktop\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (width \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MOBILE_WIDTH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"tablet\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"phone\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            function\u003C/span>\u003Cspan style=\"color:#B392F0\"> updatePadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> width\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.innerWidth\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> currentBreakpoint\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> getBreakpoint\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(width)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (currentBreakpoint \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> prevBreakpoint.current) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    prevBreakpoint.current \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentBreakpoint\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                    setPadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">PADDING\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[currentBreakpoint])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            updatePadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            window.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"resize\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, updatePadding)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"resize\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, updatePadding)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }, [])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                style\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                    paddingLeft\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: padding,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                    paddingRight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: padding,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Now I‚Äôm going to select one of my Sections and link a code override to it.\n\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-20-00-49-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-padding-hack-update-spacing-project/2025-08-11-20-01-08-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Code overrides like this run only in preview or publish mode, Framer‚Äôs canvas doesn‚Äôt execute override code, so you won‚Äôt see the padding changes live inside the editor.\u003C/p>\n\u003Cp>Now you can test it.\u003C/p>\n\u003Ch3 id=\"how-the-responsive-padding-override-works\">How the Responsive Padding Override Works\u003C/h3>\n\u003Cp>This override dynamically adjusts left and right padding on your component based on the window width.\u003C/p>\n\u003Cp>It listens to window resize events and updates padding only when crossing defined breakpoints (\u003Ccode>desktop\u003C/code>, \u003Ccode>tablet\u003C/code>, \u003Ccode>phone\u003C/code>) to avoid unnecessary re-renders.\u003C/p>\n\u003Ch3 id=\"key-constants-and-variables\">Key Constants and Variables\u003C/h3>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MOBILE_WIDTH\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 802\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLET_WIDTH\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1002\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> PADDING\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  desktop: \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  tablet: \u003C/span>\u003Cspan style=\"color:#79B8FF\">72\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  phone: \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ccode>MOBILE_WIDTH\u003C/code> and \u003Ccode>TABLET_WIDTH\u003C/code> define your breakpoint widths in pixels.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>PADDING\u003C/code> contains the padding values (in pixels) applied at each breakpoint.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"breakpoint-detection-function\">Breakpoint Detection Function\u003C/h3>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getBreakpoint\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (width \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLET_WIDTH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"desktop\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (width \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MOBILE_WIDTH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"tablet\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"phone\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>Returns a breakpoint name based on the current window width.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You can customize these breakpoints to fit your design.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"react-hook-for-padding-updates\">React Hook for Padding Updates\u003C/h3>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">padding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setPadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">PADDING\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.desktop);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> prevBreakpoint\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"desktop\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  function\u003C/span>\u003Cspan style=\"color:#B392F0\"> updatePadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> width\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.innerWidth;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> currentBreakpoint\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> getBreakpoint\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(width);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (currentBreakpoint \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> prevBreakpoint.current) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      prevBreakpoint.current \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentBreakpoint;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      setPadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">PADDING\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[currentBreakpoint]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  updatePadding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  window.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"resize\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, updatePadding);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"resize\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, updatePadding);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}, []);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>Initializes padding state to desktop padding by default.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Adds a resize event listener that calls \u003Ccode>updatePadding\u003C/code> on every window resize.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Updates the padding state only if the breakpoint changes (avoids redundant updates).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"applying-the-padding-styles\">Applying the Padding Styles\u003C/h3>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    style\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      paddingLeft\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: padding,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      paddingRight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: padding,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>The calculated padding is applied inline as \u003Ccode>paddingLeft\u003C/code> and \u003Ccode>paddingRight\u003C/code> styles on the wrapped component.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You can add other style properties here if needed.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"how-to-customize\">How to Customize\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Change padding values:\u003C/strong> Update the numbers inside \u003Ccode>PADDING\u003C/code> to control spacing on each device size.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Adjust breakpoints:\u003C/strong> Modify \u003Ccode>MOBILE_WIDTH\u003C/code> and \u003Ccode>TABLET_WIDTH\u003C/code> to your preferred pixel widths.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Add vertical padding:\u003C/strong> Include \u003Ccode>paddingTop\u003C/code> and \u003Ccode>paddingBottom\u003C/code> in the style object if you want vertical spacing too.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"important-notes\">Important Notes\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>This override only works during preview and published mode; the Framer canvas does not run override code.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If you want visual feedback inside the canvas, consider static styles or placeholder components.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>That‚Äôs it, a lean, flexible, responsive padding override you can use to manage horizontal spacing globally with zero extra spacer components.\u003C/p>",{"headings":212,"localImagePaths":251,"remoteImagePaths":252,"frontmatter":198,"imagePaths":253},[213,217,220,222,225,228,230,233,236,239,242,245,248],{"depth":214,"slug":215,"text":216},4,"solution-1-spacer-component-no-code-needed","Solution 1: Spacer Component (No Code Needed)",{"depth":214,"slug":218,"text":219},"solution-2-responsive-padding-code-override-advanced","Solution 2: Responsive Padding Code Override (Advanced)",{"depth":100,"slug":221,"text":216},"solution-1-spacer-component-no-code-needed-1",{"depth":23,"slug":223,"text":224},"step-1-create-a-spacer-component-visual-padding-control","Step 1: Create a Spacer Component (Visual Padding Control)",{"depth":100,"slug":226,"text":227},"step-2-use-spacer-components-instead-of-padding","Step 2: Use Spacer Components Instead of Padding",{"depth":100,"slug":229,"text":219},"solution-2-responsive-padding-code-override-advanced-1",{"depth":23,"slug":231,"text":232},"how-the-responsive-padding-override-works","How the Responsive Padding Override Works",{"depth":23,"slug":234,"text":235},"key-constants-and-variables","Key Constants and Variables",{"depth":23,"slug":237,"text":238},"breakpoint-detection-function","Breakpoint Detection Function",{"depth":23,"slug":240,"text":241},"react-hook-for-padding-updates","React Hook for Padding Updates",{"depth":23,"slug":243,"text":244},"applying-the-padding-styles","Applying the Padding Styles",{"depth":23,"slug":246,"text":247},"how-to-customize","How to Customize",{"depth":23,"slug":249,"text":250},"important-notes","Important Notes",[],[],[],"framer-padding-hack-update-spacing-project.md","mastering-nextjs-form-handling",{"id":255,"data":257,"body":266,"filePath":267,"digest":268,"rendered":269,"legacyId":294},{"author":20,"avatar":21,"image":258,"title":259,"description":260,"date":261,"tags":262,"slug":255,"published":150,"featured":150},"placeholder.svg","Mastering Next.js Form Handling","Dive into Next.js form handling! Learn about HTML validation, handling input resets with useActionState, and implementing server-side validation efficiently.",["Date","2025-01-17T00:00:00.000Z"],[263,264,265],"Next.js","Forms","Web Development","Let's explore how to handle form management in Next.js, from HTML form validation to managing input resets with useActionState, and efficiently implementing server-side validations.\n\n## HTML Form Validation\n\nTo begin, we'll look at how we can validate forms using HTML validation, which is a straightforward way to ensure form inputs meet certain criteria without needing JavaScript.\n\nBut first, let's start with the Next.js home page. In /src/page.tsx, we have the following code:\n\n```jsx\nimport FeedbackForm from \"@/components/feedback-form\";\n\nexport default function Home() {\n  return (\n    \u003Csection className=\"h-screen w-full flex items-center justify-center bg-yellow-400\">\n      \u003Cdiv className=\"max-w-lg w-full p-6 shadow-md rounded-xl bg-white\">\n        \u003Ch1 className=\"text-2xl font-bold mb-4\">Feedback\u003C/h1>\n        \u003CFeedbackForm />\n      \u003C/div>\n    \u003C/section>\n  );\n}\n```\n\nIn the /src/components directory, create a new file named feedback-form.tsx:\n\n```jsx\n'use client'\n\nimport React, { useActionState, useEffect } from 'react';\nimport { createFeedbackAction } from '@/actions/create-feedback-action';\nimport { FeedbackState } from '@/types';\nimport toast from 'react-hot-toast';\n\nconst initialState:FeedbackState = {\n  message: '',\n  success: false\n}\n \nfunction FeedbackForm() {\n  const [state, formAction, isPending] = useActionState(createFeedbackAction, initialState)\n\n  useEffect(() => {\n    if (!isPending && state?.message) {\n      if (state.success) {\n        toast.success(state.message, {\n          position: 'top-center',\n          duration: 4000,\n        });\n      } else {\n        toast.error(state.message, {\n          position: 'top-center',\n          duration: 4000,\n        });\n      }\n    }\n  }, [isPending, state.message, state.success]);\n\n  return (\n    \u003Cform action={formAction} className=\"space-y-4\">\n      \u003Cdiv className=\"form-control\">\n        \u003Clabel htmlFor=\"email\" className=\"label\">\n          \u003Cspan className=\"label-text\">Email\u003C/span>\n        \u003C/label>\n        \u003Cinput\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          defaultValue={state.formValues?.email || ''}\n          className={`input input-bordered w-full`}\n          minLength={4}\n          maxLength={50}\n        />\n        {state?.errors?.email && (\n          \u003Cspan className=\"text-red-500 text-sm mt-1\">\n            {state?.errors.email[0]}\n          \u003C/span>\n        )}\n      \u003C/div>\n\n      \u003Cdiv className=\"form-control mt-4\">\n        \u003Clabel htmlFor=\"text\" className=\"label\">\n          \u003Cspan className=\"label-text\">Message\u003C/span>\n        \u003C/label>\n        \u003Ctextarea\n          id=\"text\"\n          name=\"text\"\n          defaultValue={state.formValues?.text || ''}\n          rows={4}\n          className=\"textarea textarea-bordered w-full\"\n          minLength={4}\n          maxLength={1000}\n        >\u003C/textarea>\n        {state?.errors?.text && (\n          \u003Cspan className=\"text-red-500 text-sm mt-1\">\n            {state?.errors.text[0]}\n          \u003C/span>\n        )}\n      \u003C/div>\n      \u003Cbutton\n        className=\"btn btn-neutral w-full mt-4\"\n        disabled={isPending}\n      >\n        {isPending ? 'Sending...' : 'Send'}\n      \u003C/button>\n    \u003C/form>\n  )\n}\n```\n\n### Form Component Breakdown: HTML Validation, useEffect, and useActionState\n\nHere‚Äôs a detailed look at how the FeedbackForm component manages form handling using HTML validation, useEffect, and useActionState.\n\nInitial State Definition\nThe initialState object sets the baseline for feedback messaging and success status:\n\n```jsx\nconst initialState:FeedbackState = {\n  message: '',\n  success: false\n}\n```\n\nForm State Management with useActionState\nThe useActionState hook manages the form's state and actions:\n\n```jsx\nconst [state, formAction, isPending] = useActionState(createFeedbackAction, initialState)\n```\n\nThis hook helps control the form submission process, tracking whether a submission is pending and updating the state accordingly.\n\nFeedback Display with useEffect\nThe useEffect hook monitors the isPending status and the state object to display success or error messages:\n\n```jsx\nuseEffect(() => {\n  if (!isPending && state?.message) {\n    if (state.success) {\n      toast.success(state.message, {\n        position: 'top-center',\n        duration: 4000,\n      });\n    } else {\n      toast.error(state.message, {\n        position: 'top-center',\n        duration: 4000,\n      });\n    }\n  }\n}, [isPending, state.message, state.success]);\n\nexport default FeedbackForm\n```\n\nThis ensures that users are notified of the outcome after form submission.\n\n### Input Fields with HTML Validation\nThe input fields incorporate basic HTML validation rules using attributes like minLength and maxLength\n\n```jsx\n\u003Cinput\n  id=\"email\"\n  name=\"email\"\n  type=\"email\"\n  defaultValue={state.formValues?.email || ''}\n  className=\"input input-bordered w-full\"\n  minLength={4}\n  maxLength={50}\n/>\n```\n\nThese attributes validate the inputs before the form is submitted.\n\nError Handling for Inputs\nErrors are displayed beneath each input field when validation fails:\n\n```jsx\n{state?.errors?.email && (\n  \u003Cspan className=\"text-red-500 text-sm mt-1\">\n    {state?.errors.email[0]}\n  \u003C/span>\n)}\n```\n\nThe component checks for errors in the state and renders them if present.\n\nSubmit Button Behavior\nThe submit button dynamically reflects the form‚Äôs pending state:\n\n```jsx\n\u003Cbutton\n  className=\"btn btn-neutral w-full mt-4\"\n  disabled={isPending}\n>\n  {isPending ? 'Sending...' : 'Send'}\n\u003C/button>\n```\n\nWhen the form is pending, the button displays ‚ÄúSending‚Ä¶‚Äù to indicate the submission process.\n\nThis breakdown showcases how each part of the FeedbackForm component works together to create a smooth form handling experience, leveraging both client-side validation and feedback mechanisms.\n\n## sendFeedbackAction server action\n\nWithin the /src/actions directory, create a new file named send-feedback-action.ts:\n\n```jsx\n'use server'\n\nimport { z } from 'zod' \nimport { connectDB } from \"@/utils/connectDB\"\nimport { FeedbackData, FeedbackState } from '@/types'\nimport { getErrorMessage } from '@/utils/error'\nimport Feedback from \"@/models/feedback\";\n\nexport async function createFeedbackAction(prevState: FeedbackState, formData: FormData) {\n  const schema = z.object({\n    email: z\n      .string()\n      .email({ message: 'Invalid email format' })\n      .nonempty({ message: 'Email is required' })\n      .max(50, { message: 'Email should be at most 50 characters long' }),\n    text: z\n      .string()\n      .min(4, { message: 'Message should be at least 4 characters long' })\n      .nonempty({ message: 'Message is required' })\n      .max(1000, { message: 'Message should be at most 500 characters long' }),\n  })\n  \n  try {\n    const sourceData: FeedbackData = {\n      email: formData.get('email') as string,\n      text: formData.get('text') as string,\n    }\n\n    const validatedFields = schema.safeParse(sourceData);\n\n    if (!validatedFields.success) {\n      return {\n        success: false,\n        message: 'Invalid fields',\n        errors: validatedFields.error.flatten().fieldErrors,\n        formValues: sourceData\n      };\n    }\n    \n    await connectDB()\n\n    await Feedback.create(\n      validatedFields.data\n    )\n\n    return {\n      success: true, \n      message: 'New feedback created' \n    }\n  } catch (error) {\n    console.error(\"Error sending feedback:\", getErrorMessage(error));\n    return {\n      success: false, \n      message: `We couldn't process your feedback. Please try again later.`\n    }\n  }\n}\n```\n\n### sendFeedbackAction Breakdown: Zod Schema Validation and Database Interaction\n\nThe createFeedbackAction function handles form validation and database interactions using Zod schemas and MongoDB.\n\nAs you can see, we extract the error message from the catch block and return a generic error message to the user.\n\ngetErrorMessage(error) is a utility function that extracts the error message from the error object.\n\nThis error is of type unknown by default, it can be a string or an object, so we need to check if it's an object and extract the message property.\n\n```jsx\nexport const getErrorMessage = (error: unknown): string => {\n  let message: string\n\n  if (error instanceof Error) {\n    message = error.message;\n  } else if (error && typeof error === 'object' && 'message' in error) {\n    message = String(error.message);\n  } else if (typeof error === 'string') {\n    message = error;\n  } else {\n    message = 'An unknown error occurred';\n  }\n\n  return message;\n}\n```\n\nNow you can log the error message to the console, send it to your error tracking service, save it to MongoDB, or handle it in any way you prefer, while returning a user-friendly message to the user.\n\n## Conclusion\n\nIn this post, we explored Next.js form handling, covering HTML validation, input resets with useActionState, and efficient server-side validation.","src/content/blog/nextjs-form-handling.md","4127f68f80e0fd0f",{"html":270,"metadata":271},"\u003Cp>Let‚Äôs explore how to handle form management in Next.js, from HTML form validation to managing input resets with useActionState, and efficiently implementing server-side validations.\u003C/p>\n\u003Ch2 id=\"html-form-validation\">HTML Form Validation\u003C/h2>\n\u003Cp>To begin, we‚Äôll look at how we can validate forms using HTML validation, which is a straightforward way to ensure form inputs meet certain criteria without needing JavaScript.\u003C/p>\n\u003Cp>But first, let‚Äôs start with the Next.js home page. In /src/page.tsx, we have the following code:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> FeedbackForm \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@/components/feedback-form\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Home\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"h-screen w-full flex items-center justify-center bg-yellow-400\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"max-w-lg w-full p-6 shadow-md rounded-xl bg-white\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-2xl font-bold mb-4\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Feedback&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">FeedbackForm\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>In the /src/components directory, create a new file named feedback-form.tsx:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">'use client'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React, { useActionState, useEffect } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { createFeedbackAction } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/actions/create-feedback-action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { FeedbackState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/types'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> toast \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-hot-toast'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> initialState\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">FeedbackState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> FeedbackForm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">formAction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">isPending\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useActionState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(createFeedbackAction, initialState)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">isPending \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state?.message) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (state.success) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">success\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [isPending, state.message, state.success]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#B392F0\"> action\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{formAction} \u003C/span>\u003Cspan style=\"color:#B392F0\">className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"space-y-4\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"form-control\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#B392F0\"> htmlFor\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label-text\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Email&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          id\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{state.formValues?.email \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`input input-bordered w-full`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          minLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          maxLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {state?.errors?.email \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-red-500 text-sm mt-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            {state?.errors.email[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"form-control mt-4\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#B392F0\"> htmlFor\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label-text\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Message&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">textarea\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          id\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{state.formValues?.text \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          rows\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"textarea textarea-bordered w-full\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          minLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          maxLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        >&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">textarea\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {state?.errors?.text \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-red-500 text-sm mt-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            {state?.errors.text[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"btn btn-neutral w-full mt-4\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        disabled\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{isPending}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      >\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {isPending \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Sending...'\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Send'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch3 id=\"form-component-breakdown-html-validation-useeffect-and-useactionstate\">Form Component Breakdown: HTML Validation, useEffect, and useActionState\u003C/h3>\n\u003Cp>Here‚Äôs a detailed look at how the FeedbackForm component manages form handling using HTML validation, useEffect, and useActionState.\u003C/p>\n\u003Cp>Initial State Definition\nThe initialState object sets the baseline for feedback messaging and success status:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> initialState\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">FeedbackState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Form State Management with useActionState\nThe useActionState hook manages the form‚Äôs state and actions:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">formAction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">isPending\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useActionState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(createFeedbackAction, initialState)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>This hook helps control the form submission process, tracking whether a submission is pending and updating the state accordingly.\u003C/p>\n\u003Cp>Feedback Display with useEffect\nThe useEffect hook monitors the isPending status and the state object to display success or error messages:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">isPending \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state?.message) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (state.success) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">success\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}, [isPending, state.message, state.success]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> FeedbackForm\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>This ensures that users are notified of the outcome after form submission.\u003C/p>\n\u003Ch3 id=\"input-fields-with-html-validation\">Input Fields with HTML Validation\u003C/h3>\n\u003Cp>The input fields incorporate basic HTML validation rules using attributes like minLength and maxLength\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{state.formValues?.email \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"input input-bordered w-full\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  minLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  maxLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">/>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>These attributes validate the inputs before the form is submitted.\u003C/p>\n\u003Cp>Error Handling for Inputs\nErrors are displayed beneath each input field when validation fails:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{state?.errors?.email \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-red-500 text-sm mt-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {state?.errors.email[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>The component checks for errors in the state and renders them if present.\u003C/p>\n\u003Cp>Submit Button Behavior\nThe submit button dynamically reflects the form‚Äôs pending state:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"btn btn-neutral w-full mt-4\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  disabled\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{isPending}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {isPending \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Sending...'\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Send'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>When the form is pending, the button displays ‚ÄúSending‚Ä¶‚Äù to indicate the submission process.\u003C/p>\n\u003Cp>This breakdown showcases how each part of the FeedbackForm component works together to create a smooth form handling experience, leveraging both client-side validation and feedback mechanisms.\u003C/p>\n\u003Ch2 id=\"sendfeedbackaction-server-action\">sendFeedbackAction server action\u003C/h2>\n\u003Cp>Within the /src/actions directory, create a new file named send-feedback-action.ts:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">'use server'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { z } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'zod'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { connectDB } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@/utils/connectDB\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { FeedbackData, FeedbackState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/types'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { getErrorMessage } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/utils/error'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Feedback \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@/models/feedback\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> createFeedbackAction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">prevState\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FeedbackState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">formData\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FormData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> schema\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> z.\u003C/span>\u003Cspan style=\"color:#B392F0\">object\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    email: z\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">email\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Invalid email format'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">nonempty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Email is required'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Email should be at most 50 characters long'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text: z\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">min\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Message should be at least 4 characters long'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">nonempty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Message is required'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Message should be at most 500 characters long'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> sourceData\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FeedbackData\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      email: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'email'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      text: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'text'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> validatedFields\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> schema.\u003C/span>\u003Cspan style=\"color:#B392F0\">safeParse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sourceData);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">validatedFields.success) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Invalid fields'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        errors: validatedFields.error.\u003C/span>\u003Cspan style=\"color:#B392F0\">flatten\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().fieldErrors,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        formValues: sourceData\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> connectDB\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Feedback.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      validatedFields.data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'New feedback created'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Error sending feedback:\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">getErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`We couldn't process your feedback. Please try again later.`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch3 id=\"sendfeedbackaction-breakdown-zod-schema-validation-and-database-interaction\">sendFeedbackAction Breakdown: Zod Schema Validation and Database Interaction\u003C/h3>\n\u003Cp>The createFeedbackAction function handles form validation and database interactions using Zod schemas and MongoDB.\u003C/p>\n\u003Cp>As you can see, we extract the error message from the catch block and return a generic error message to the user.\u003C/p>\n\u003Cp>getErrorMessage(error) is a utility function that extracts the error message from the error object.\u003C/p>\n\u003Cp>This error is of type unknown by default, it can be a string or an object, so we need to check if it‚Äôs an object and extract the message property.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#B392F0\"> getErrorMessage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> message\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error.message;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'object'\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'message'\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error.message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'string'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'An unknown error occurred'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> message;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Now you can log the error message to the console, send it to your error tracking service, save it to MongoDB, or handle it in any way you prefer, while returning a user-friendly message to the user.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>In this post, we explored Next.js form handling, covering HTML validation, input resets with useActionState, and efficient server-side validation.\u003C/p>",{"headings":272,"localImagePaths":291,"remoteImagePaths":292,"frontmatter":257,"imagePaths":293},[273,276,279,282,285,288],{"depth":100,"slug":274,"text":275},"html-form-validation","HTML Form Validation",{"depth":23,"slug":277,"text":278},"form-component-breakdown-html-validation-useeffect-and-useactionstate","Form Component Breakdown: HTML Validation, useEffect, and useActionState",{"depth":23,"slug":280,"text":281},"input-fields-with-html-validation","Input Fields with HTML Validation",{"depth":100,"slug":283,"text":284},"sendfeedbackaction-server-action","sendFeedbackAction server action",{"depth":23,"slug":286,"text":287},"sendfeedbackaction-breakdown-zod-schema-validation-and-database-interaction","sendFeedbackAction Breakdown: Zod Schema Validation and Database Interaction",{"depth":100,"slug":289,"text":290},"conclusion","Conclusion",[],[],[],"nextjs-form-handling.md","creating-a-simple-counter-in-framer-using-code-overrides",{"id":295,"data":297,"body":304,"filePath":305,"digest":306,"rendered":307,"legacyId":333},{"author":20,"avatar":86,"image":17,"title":298,"description":299,"date":300,"category":301,"slug":295,"tags":302,"published":25,"featured":25,"pinned":150},"Creating a Simple Counter in Framer Using Code Overrides","Build a basic counter in Framer using shared state and code overrides, no extra state management needed.",["Date","2025-08-04T00:00:00.000Z"],{"label":26,"slug":7},[26,303],"Code Overrides","Framer‚Äôs power shines when you combine design with code. If you want your prototypes to do more than just look good, you need to control their behavior programmatically.\n\nIn this tutorial, we‚Äôll start with a simple but essential technique: **how to change a component‚Äôs variant using code overrides**. This is the foundation that will let us build more dynamic interactions.\n\nOnce you‚Äôve mastered variants, we‚Äôll move on to the main goal, **creating a simple counter that updates on click**. Step by step, you‚Äôll learn how to connect React state to your Framer components and make them truly interactive.\n\nLet‚Äôs dive in.\n\n## Table of Contents\n\n- [Variants and Code Overrides: How to Change Framer Component Variants programmatically](#variants-and-code-overrides-how-to-change-framer-component-variants-programmatically)  \n- [Creating the Counter Component (with Code Overrides)](#creating-the-counter-component-with-code-overrides)\n\n\n## Variants and Code Overrides: How to Change Framer Component Variants programmatically\n\nFirst, I‚Äôm going to show you how to change the variant of a button component when you click on it using code overrides. This simple example will lay the groundwork for more advanced interactions later.\n\nStart by creating a simple sky blue frame anywhere on your canvas. Once you‚Äôve got it, select the frame and press **Ctrl + Alt + K** to convert it into a component. This will let you add variants and control it with code overrides.\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-51-21-image.webp)\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-46-47-image.webp)\n\nHere you can see the layers\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-22-34-image.webp)\n\nRename the first variant to \"Default\" and create a second variant with a darker color, name it \"Dark\"\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-47-23-image.webp)\n\nNow go back to Home, select the button and click on code overrides, select Files: Exmaples\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-55-02-image.webp)\n\nThis will create an Examples.tsx file in the Assets menu\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-56-14-image.webp)\n\nLet's open Examples.tsx\n\nWe get a bunch of default code\n\n```ts\nimport { forwardRef, type ComponentType } from \"react\"\nimport { createStore } from \"https://framer.com/m/framer/store.js@^1.0.0\"\nimport { randomColor } from \"https://framer.com/m/framer/utils.js@^0.9.0\"\n\n// Learn more: https://www.framer.com/developers/overrides/\n\nconst useStore = createStore({\n    background: \"#0099FF\",\n})\n\nexport function withRotate(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        return (\n            \u003CComponent\n                ref={ref}\n                {...props}\n                animate={{ rotate: 90 }}\n                transition={{ duration: 2 }}\n            />\n        )\n    })\n}\n\nexport function withHover(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        return \u003CComponent ref={ref} {...props} whileHover={{ scale: 1.05 }} />\n    })\n}\n\nexport function withRandomColor(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n\n        return (\n            \u003CComponent\n                ref={ref}\n                {...props}\n                animate={{\n                    background: store.background,\n                }}\n                onClick={() => {\n                    setStore({ background: randomColor() })\n                }}\n            />\n        )\n    })\n}\n```\n\nNow let's make a copy of Example.tsx and rename it VariantSwitch.tsx\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-21-46-03-image.webp)\n\nAnd now open your new file.\n\nWe see that they are using `useStore` here:\n\n```ts\nconst useStore = createStore({\n background: \"#0099FF\",\n});\n```\n\nThis creates a **shared state store** with an initial value for `background`. Think of it as a tiny global state container that multiple components or overrides can read from and update.\n\nUsing `createStore` and `useStore` lets you **share state across your entire Framer project**. When one component updates the `background` color, any other component using that same store will instantly reflect the change.\n\nTypically, you place your store in a separate file, like `useStore.ts` when you want to make values available throughout your whole site.\n\nBut you can also define a store within a single file to share data between multiple functions or components locally.\n\n---\n\nIn this case, though, we‚Äôre going to use React‚Äôs built-in `useState` instead of `useStore`.\n\nWhy? Because **we don‚Äôt need to share state between multiple overrides or components here**. The variant we‚Äôre switching is only relevant inside this single component.\n\nUsing `useState` keeps things simple and local. It lets us toggle the variant on click without affecting anything else in the app.\n\nSo for controlling a variant within just one override, `useState` is the better fit, lightweight and straightforward.\n\nSo now, let's import useState and delete everything we are not going to need.\n\n```ts\nimport { forwardRef, type ComponentType, useState } from \"react\"\n\nexport function withRotate(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        return (\n            \u003CComponent\n                ref={ref}\n                {...props}\n                animate={{ rotate: 90 }}\n                transition={{ duration: 2 }}\n            />\n        )\n    })\n}\n```\n\nNow I‚Äôm going to **refactor** the `withRotate` function, giving it a clearer name and tweaking its behavior to better fit our needs.\n\n```ts\nimport { forwardRef, type ComponentType, useState } from \"react\"\n\nexport function withVariantSwitch(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const VALID_VARIANTS = [\"Default\", \"Dark\"]\n        const DEFAULT_VARIANT = \"Default\"\n\n        const [variant, setVariant] = useState(DEFAULT_VARIANT)\n\n        const handleClick = () => {\n            const next = variant === \"Dark\" ? \"Default\" : \"Dark\"\n\n            if (VALID_VARIANTS.includes(next)) {\n                setVariant(next)\n            } else {\n                alert(`Invalid variant: ${next}`)\n                setVariant(DEFAULT_VARIANT)\n            }\n        }\n\n        return (\n            \u003CComponent\n                ref={ref}\n                {...props}\n                variant={variant}\n                onClick={handleClick}\n            />\n        )\n    })\n}\n```\n\nThis override lets you switch between variants by clicking the component. It toggles between \"Default\" and \"Dark\", and falls back safely if the value isn't valid.\n\nNow that the `withVariantSwitch` function is ready, we apply it in Framer.\n\nUnder the **Code Overrides** panel:\n\n- Set **File** to `VariantSwitch`\n\n- Set **Override** to `withVariantSwitch`\n\nOnce that‚Äôs hooked up, every time you click the component, it‚Äôll switch between the `\"Default\"` and `\"Dark\"` variants.\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-16-29-20-image.webp)\n\nNo extra props. No extra logic in the canvas. All handled inside the override.\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-16-31-00-image.webp)\n\n> üí° **React Tip**: When combining props, **order matters**.  \n> If you're controlling a prop like `variant`, make sure to place it **after** `{...props}` in your JSX:\n\n```ts\nreturn (\n   \u003CComponent\n       ref={ref}\n       {...props}\n       variant={store.count === 0 ? \"Left Disabled\" : \"Left\"}\n       onClick={decrement}\n   />\n)\n```\n\n## Creating the Counter Component (with Code Overrides)\n\nLet's build a counter component and customize its logic with overrides.\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-11-40-image.webp)\n\nWe have a stack that wraps the left and right buttons, and another stack that holds the text `0`.\n\nBelow that, there‚Äôs a reset button.![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-13-54-image.webp)\n\nCreate a reusable button component with some icons (optional) and support for different variants.![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-15-53-image.webp)\n\nGo to `Assets`, duplicate Examples.tsx and name it Counter.tsx\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-19-29-image.webp)\n\nStart with this:\n\n```ts\nimport { forwardRef, type ComponentType } from \"react\"\nimport { createStore } from \"https://framer.com/m/framer/store.js@^1.0.0\"\n\n// Learn more: https://www.framer.com/developers/overrides/\n\nconst useStore = createStore({\n    count: 0,\n})\n```\n\nFirst, we import `forwardRef` from React and `createStore` from Framer. Then we create a shared store with a single value, `count`, starting at 0.\n\nNow we start adding the overrides.\n\n### 1. `withCount`\n\nThis one reads the count from the store and sends it as text to the component.\n\n```ts\nexport function withCount(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n        let count = store.count.toString()\n        return \u003CComponent ref={ref} {...props} text={count} />\n    })\n}\n```\n\nText expects a string, so you have to use toString().\n\nThe number gets updated automatically when the store changes. Simple and reactive.\n\n### 2. `withIncrementClick`\n\nAdds a click handler that increases the count by 1. You click, the store updates, everything else reacts.\n\n```ts\nexport function withIncrementClick(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n\n        const increment = () => {\n            setStore({ count: store.count + 1 })\n        }\n\n        return \u003CComponent ref={ref} {...props} onClick={increment} />\n    })\n}\n```\n\nAttach it with `onClick`.\n\n### 3. `withDecrementClick`\n\nSame idea, but for decreasing. It won‚Äôt let the count go below 0. Also changes the button variant when the count is zero.\n\n```ts\nexport function withDecrementClick(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n\n        const decrement = () => {\n            if (store.count > 0) setStore({ count: store.count - 1 })\n        }\n\n        return (\n            \u003CComponent\n                ref={ref}\n                {...props}\n                variant={store.count === 0 ? \"Left Disabled\" : \"Left\"}\n                onClick={decrement}\n            />\n        )\n    })\n}\n```\n\nNice touch for UI feedback.\n\n### 4. `withReset`\n\nResets the count back to 0. Good for starting over. Simple handler.\n\n```ts\nexport function withReset(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n\n        const reset = () => setStore({ count: 0 })\n\n        return \u003CComponent ref={ref} {...props} onClick={reset} />\n    })\n}\n```\n\nNow you have four overrides, each one doing a single job, all connected through the same store. Clean, reactive, scalable.\n\nNow, go back to Home, select the left button component and connect withDecrementClick to it.\n\nApply `withDecrementClick` to the left button, `withIncrementClick` to the right one.\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-28-10-image.webp)\n\nUse `withCount` on the text component to display the current count.\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-29-31-image.webp)\n\nFinally, add `withReset` to the reset button.\n\n![](/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-30-27-image.webp)\n\nThat‚Äôs it, every piece is now synced through the same store, no props drilling, no extra state management. Just overrides doing their job.\n\n```ts\nimport { forwardRef, type ComponentType } from \"react\"\nimport { createStore } from \"https://framer.com/m/framer/store.js@^1.0.0\"\n\n// Learn more: https://www.framer.com/developers/overrides/\n\nconst useStore = createStore({\n    count: 0,\n})\n\nexport function withCount(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n        let count = store.count.toString()\n        return \u003CComponent ref={ref} {...props} text={count} />\n    })\n}\n\nexport function withIncrementClick(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n\n        const increment = () => {\n            setStore({ count: store.count + 1 })\n        }\n\n        return \u003CComponent ref={ref} {...props} onClick={increment} />\n    })\n}\n\nexport function withDecrementClick(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n\n        const decrement = () => {\n            if (store.count > 0) setStore({ count: store.count - 1 })\n        }\n\n        return (\n            \u003CComponent\n                ref={ref}\n                {...props}\n                variant={store.count === 0 ? \"Left Disabled\" : \"Left\"}\n                onClick={decrement}\n            />\n        )\n    })\n}\n\nexport function withReset(Component): ComponentType {\n    return forwardRef((props, ref) => {\n        const [store, setStore] = useStore()\n\n        const reset = () => setStore({ count: 0 })\n\n        return \u003CComponent ref={ref} {...props} onClick={reset} />\n    })\n}\n```","src/content/blog/creating-a-simple-counter-in-framer-using-code-overrides.md","4e88580bbc445dc3",{"html":308,"metadata":309},"\u003Cp>Framer‚Äôs power shines when you combine design with code. If you want your prototypes to do more than just look good, you need to control their behavior programmatically.\u003C/p>\n\u003Cp>In this tutorial, we‚Äôll start with a simple but essential technique: \u003Cstrong>how to change a component‚Äôs variant using code overrides\u003C/strong>. This is the foundation that will let us build more dynamic interactions.\u003C/p>\n\u003Cp>Once you‚Äôve mastered variants, we‚Äôll move on to the main goal, \u003Cstrong>creating a simple counter that updates on click\u003C/strong>. Step by step, you‚Äôll learn how to connect React state to your Framer components and make them truly interactive.\u003C/p>\n\u003Cp>Let‚Äôs dive in.\u003C/p>\n\u003Ch2 id=\"table-of-contents\">Table of Contents\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#variants-and-code-overrides-how-to-change-framer-component-variants-programmatically\">Variants and Code Overrides: How to Change Framer Component Variants programmatically\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#creating-the-counter-component-with-code-overrides\">Creating the Counter Component (with Code Overrides)\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"variants-and-code-overrides-how-to-change-framer-component-variants-programmatically\">Variants and Code Overrides: How to Change Framer Component Variants programmatically\u003C/h2>\n\u003Cp>First, I‚Äôm going to show you how to change the variant of a button component when you click on it using code overrides. This simple example will lay the groundwork for more advanced interactions later.\u003C/p>\n\u003Cp>Start by creating a simple sky blue frame anywhere on your canvas. Once you‚Äôve got it, select the frame and press \u003Cstrong>Ctrl + Alt + K\u003C/strong> to convert it into a component. This will let you add variants and control it with code overrides.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-51-21-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-46-47-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Here you can see the layers\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-22-34-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Rename the first variant to ‚ÄúDefault‚Äù and create a second variant with a darker color, name it ‚ÄúDark‚Äù\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-47-23-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Now go back to Home, select the button and click on code overrides, select Files: Exmaples\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-55-02-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>This will create an Examples.tsx file in the Assets menu\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-20-56-14-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Let‚Äôs open Examples.tsx\u003C/p>\n\u003Cp>We get a bunch of default code\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { forwardRef, \u003C/span>\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ComponentType } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { createStore } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://framer.com/m/framer/store.js@^1.0.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { randomColor } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://framer.com/m/framer/utils.js@^0.9.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Learn more: https://www.framer.com/developers/overrides/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> useStore\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    background: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"#0099FF\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                animate\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{ \u003C/span>\u003Cspan style=\"color:#B392F0\">rotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                transition\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{ \u003C/span>\u003Cspan style=\"color:#B392F0\">duration\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withHover\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#B392F0\">whileHover\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{ \u003C/span>\u003Cspan style=\"color:#FFAB70\">scale\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.05\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">export \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withRandomColor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                animate\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                    background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: store.background,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() => {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                    setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ background: \u003C/span>\u003Cspan style=\"color:#B392F0\">randomColor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Now let‚Äôs make a copy of Example.tsx and rename it VariantSwitch.tsx\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-03-21-46-03-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>And now open your new file.\u003C/p>\n\u003Cp>We see that they are using \u003Ccode>useStore\u003C/code> here:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> useStore\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> background: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"#0099FF\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>This creates a \u003Cstrong>shared state store\u003C/strong> with an initial value for \u003Ccode>background\u003C/code>. Think of it as a tiny global state container that multiple components or overrides can read from and update.\u003C/p>\n\u003Cp>Using \u003Ccode>createStore\u003C/code> and \u003Ccode>useStore\u003C/code> lets you \u003Cstrong>share state across your entire Framer project\u003C/strong>. When one component updates the \u003Ccode>background\u003C/code> color, any other component using that same store will instantly reflect the change.\u003C/p>\n\u003Cp>Typically, you place your store in a separate file, like \u003Ccode>useStore.ts\u003C/code> when you want to make values available throughout your whole site.\u003C/p>\n\u003Cp>But you can also define a store within a single file to share data between multiple functions or components locally.\u003C/p>\n\u003Chr>\n\u003Cp>In this case, though, we‚Äôre going to use React‚Äôs built-in \u003Ccode>useState\u003C/code> instead of \u003Ccode>useStore\u003C/code>.\u003C/p>\n\u003Cp>Why? Because \u003Cstrong>we don‚Äôt need to share state between multiple overrides or components here\u003C/strong>. The variant we‚Äôre switching is only relevant inside this single component.\u003C/p>\n\u003Cp>Using \u003Ccode>useState\u003C/code> keeps things simple and local. It lets us toggle the variant on click without affecting anything else in the app.\u003C/p>\n\u003Cp>So for controlling a variant within just one override, \u003Ccode>useState\u003C/code> is the better fit, lightweight and straightforward.\u003C/p>\n\u003Cp>So now, let‚Äôs import useState and delete everything we are not going to need.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { forwardRef, \u003C/span>\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ComponentType, useState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                animate\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{ \u003C/span>\u003Cspan style=\"color:#B392F0\">rotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                transition\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{ \u003C/span>\u003Cspan style=\"color:#B392F0\">duration\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Now I‚Äôm going to \u003Cstrong>refactor\u003C/strong> the \u003Ccode>withRotate\u003C/code> function, giving it a clearer name and tweaking its behavior to better fit our needs.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { forwardRef, \u003C/span>\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ComponentType, useState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withVariantSwitch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> VALID_VARIANTS\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Default\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Dark\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> DEFAULT_VARIANT\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Default\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">variant\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setVariant\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">DEFAULT_VARIANT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleClick\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> next\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> variant \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Dark\"\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Default\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Dark\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">VALID_VARIANTS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">includes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(next)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                setVariant\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(next)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                alert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Invalid variant: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">next\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">                setVariant\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">DEFAULT_VARIANT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                variant\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{variant}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{handleClick}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>This override lets you switch between variants by clicking the component. It toggles between ‚ÄúDefault‚Äù and ‚ÄúDark‚Äù, and falls back safely if the value isn‚Äôt valid.\u003C/p>\n\u003Cp>Now that the \u003Ccode>withVariantSwitch\u003C/code> function is ready, we apply it in Framer.\u003C/p>\n\u003Cp>Under the \u003Cstrong>Code Overrides\u003C/strong> panel:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Set \u003Cstrong>File\u003C/strong> to \u003Ccode>VariantSwitch\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Set \u003Cstrong>Override\u003C/strong> to \u003Ccode>withVariantSwitch\u003C/code>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Once that‚Äôs hooked up, every time you click the component, it‚Äôll switch between the \u003Ccode>\"Default\"\u003C/code> and \u003Ccode>\"Dark\"\u003C/code> variants.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-16-29-20-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>No extra props. No extra logic in the canvas. All handled inside the override.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-16-31-00-image.webp\" alt=\"\">\u003C/p>\n\u003Cblockquote>\n\u003Cp>üí° \u003Cstrong>React Tip\u003C/strong>: When combining props, \u003Cstrong>order matters\u003C/strong>.\u003Cbr>\nIf you‚Äôre controlling a prop like \u003Ccode>variant\u003C/code>, make sure to place it \u003Cstrong>after\u003C/strong> \u003Ccode>{...props}\u003C/code> in your JSX:\u003C/p>\n\u003C/blockquote>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">   &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">       ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">       {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">       variant\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{store.count \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Left Disabled\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Left\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">       onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{decrement}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">   />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch2 id=\"creating-the-counter-component-with-code-overrides\">Creating the Counter Component (with Code Overrides)\u003C/h2>\n\u003Cp>Let‚Äôs build a counter component and customize its logic with overrides.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-11-40-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>We have a stack that wraps the left and right buttons, and another stack that holds the text \u003Ccode>0\u003C/code>.\u003C/p>\n\u003Cp>Below that, there‚Äôs a reset button.\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-13-54-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Create a reusable button component with some icons (optional) and support for different variants.\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-15-53-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Go to \u003Ccode>Assets\u003C/code>, duplicate Examples.tsx and name it Counter.tsx\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-19-29-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Start with this:\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { forwardRef, \u003C/span>\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ComponentType } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { createStore } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://framer.com/m/framer/store.js@^1.0.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Learn more: https://www.framer.com/developers/overrides/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> useStore\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>First, we import \u003Ccode>forwardRef\u003C/code> from React and \u003Ccode>createStore\u003C/code> from Framer. Then we create a shared store with a single value, \u003Ccode>count\u003C/code>, starting at 0.\u003C/p>\n\u003Cp>Now we start adding the overrides.\u003C/p>\n\u003Ch3 id=\"1-withcount\">1. \u003Ccode>withCount\u003C/code>\u003C/h3>\n\u003Cp>This one reads the count from the store and sends it as text to the component.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> store.count.\u003C/span>\u003Cspan style=\"color:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#B392F0\">text\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Text expects a string, so you have to use toString().\u003C/p>\n\u003Cp>The number gets updated automatically when the store changes. Simple and reactive.\u003C/p>\n\u003Ch3 id=\"2-withincrementclick\">2. \u003Ccode>withIncrementClick\u003C/code>\u003C/h3>\n\u003Cp>Adds a click handler that increases the count by 1. You click, the store updates, everything else reacts.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withIncrementClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#B392F0\"> increment\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: store.count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#B392F0\">onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">increment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Attach it with \u003Ccode>onClick\u003C/code>.\u003C/p>\n\u003Ch3 id=\"3-withdecrementclick\">3. \u003Ccode>withDecrementClick\u003C/code>\u003C/h3>\n\u003Cp>Same idea, but for decreasing. It won‚Äôt let the count go below 0. Also changes the button variant when the count is zero.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withDecrementClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#B392F0\"> decrement\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (store.count \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: store.count \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                variant\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{store.count \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Left Disabled\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Left\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{decrement}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Nice touch for UI feedback.\u003C/p>\n\u003Ch3 id=\"4-withreset\">4. \u003Ccode>withReset\u003C/code>\u003C/h3>\n\u003Cp>Resets the count back to 0. Good for starting over. Simple handler.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withReset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#B392F0\"> reset\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#B392F0\">onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">reset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Now you have four overrides, each one doing a single job, all connected through the same store. Clean, reactive, scalable.\u003C/p>\n\u003Cp>Now, go back to Home, select the left button component and connect withDecrementClick to it.\u003C/p>\n\u003Cp>Apply \u003Ccode>withDecrementClick\u003C/code> to the left button, \u003Ccode>withIncrementClick\u003C/code> to the right one.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-28-10-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Use \u003Ccode>withCount\u003C/code> on the text component to display the current count.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-29-31-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Finally, add \u003Ccode>withReset\u003C/code> to the reset button.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/creating-a-simple-counter-in-framer-using-code-overrides/2025-08-04-19-30-27-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>That‚Äôs it, every piece is now synced through the same store, no props drilling, no extra state management. Just overrides doing their job.\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { forwardRef, \u003C/span>\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ComponentType } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { createStore } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://framer.com/m/framer/store.js@^1.0.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Learn more: https://www.framer.com/developers/overrides/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> useStore\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> store.count.\u003C/span>\u003Cspan style=\"color:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#B392F0\">text\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">export \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withIncrementClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#B392F0\"> increment\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: store.count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#B392F0\">onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">increment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">export \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withDecrementClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#B392F0\"> decrement\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (store.count \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: store.count \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                variant\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{store.count \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Left Disabled\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Left\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{decrement}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">export \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> withReset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ComponentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> forwardRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">store\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#B392F0\"> reset\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">ref\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#B392F0\">onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">reset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>",{"headings":310,"localImagePaths":330,"remoteImagePaths":331,"frontmatter":297,"imagePaths":332},[311,312,315,318,321,324,327],{"depth":100,"slug":101,"text":102},{"depth":100,"slug":313,"text":314},"variants-and-code-overrides-how-to-change-framer-component-variants-programmatically","Variants and Code Overrides: How to Change Framer Component Variants programmatically",{"depth":100,"slug":316,"text":317},"creating-the-counter-component-with-code-overrides","Creating the Counter Component (with Code Overrides)",{"depth":23,"slug":319,"text":320},"1-withcount","1. withCount",{"depth":23,"slug":322,"text":323},"2-withincrementclick","2. withIncrementClick",{"depth":23,"slug":325,"text":326},"3-withdecrementclick","3. withDecrementClick",{"depth":23,"slug":328,"text":329},"4-withreset","4. withReset",[],[],[],"creating-a-simple-counter-in-framer-using-code-overrides.md","framer-and-webflow-took-over-my-client-requests",{"id":334,"data":336,"body":345,"filePath":346,"digest":347,"rendered":348,"legacyId":358},{"author":20,"avatar":86,"image":17,"title":337,"description":338,"date":339,"category":340,"slug":334,"tags":342,"published":25,"featured":25,"pinned":150},"Framer and Webflow Took Over My Client Requests: Here‚Äôs Why I Dropped WordPress","My client started choosing Framer and Webflow over WordPress, and I share the story behind the shift and what I learned.",["Date","2025-08-13T00:00:00.000Z"],{"label":265,"slug":341},"web-development",[26,343,344],"Webflow","WordPress","For years, almost every project I worked on started the same way.\n\nThe design agency would send me the designs or the changes they wanted to make to a site, and I would implement them in WordPress, go through feedback, revisions, and then delivery.\n\n‚ÄúCan you update the header and add a form?‚Äù Two hours later, I was still wrestling with a bloated theme, outdated plugins, and a dashboard that looked like it had not been touched since 2012.\n\nThe most difficult case was a site where the home page was split into four moving sections. It was not customizable at all and required major changes. On top of that, it was difficult to update because the theme‚Äôs name was already taken by another template, which caused conflicts.\n\nI got tired of wrestling with WordPress themes. Every ‚Äúsimple‚Äù change turned into a scavenger hunt through template overrides, hooks, and endless CSS tweaks. Change one thing, and three other things would break. It felt less like customization and more like defusing a bomb while blindfolded.\n\nSo I decided to switch to something better. I first tried Wix.\n\n![](/media/blog/framer-and-webflow-took-over-my-client-requests/2025-08-13-00-49-03-image.webp)\n\nAlthough I like Squarespace more, it does not have a free plan.\n\n![](/media/blog/framer-and-webflow-took-over-my-client-requests/2025-08-13-00-50-25-image.webp)\n\n I learned from some YouTube tutorials and published a gig on Fiverr.\n\n![](/media/blog/framer-and-webflow-took-over-my-client-requests/2025-08-13-00-52-09-image.webp)\n\nIt was my first gig on Fiverr. I landed it after a month, for someone in Israel. A simple mockup for $20.\n\nBut I did not like it much. It was hard to make templates and customize them.\n\nThen I discovered some YouTube videos about Webflow, so I tried learning it with a Udemy course from an instructor named Vako Shvili.\n\n![](/media/blog/framer-and-webflow-took-over-my-client-requests/61250540f4bb236999a00bd3a8ac81567c8f090c.webp)\n\nI never even started half of the Udemy courses I bought.\n\nThere was also Framer. Many designers I follow on X use it because it is no-code, simpler than Webflow, and quite similar. With just a few videos from Framer University and some YouTubers, you can already start building.\n\nI did the same as I had done with Wix: I posted gigs for Webflow and Framer, alongside my WordPress and design gigs.\n\nThen something changed.\n\nOne client asked for Webflow.  \nAnother requested Framer.\n\nMy first paid Webflow gig was for a German site, meetovo.com. \n\nThey initially asked me to integrate Swiper.js, then to create a Figma prototype, a set of dashboards with new features for their HR web app, and finally, to design social media content. I turned down the social media role because I wasn‚Äôt comfortable with their style, so I focused solely on the dashboards and the prototype with all the new interactions.\n\nAfter that, I didn‚Äôt hear from them again.\n\nBefore long, nobody was asking for WordPress anymore.\n\nI took the opportunity to finally remove all my WordPress gigs, and the agency I worked with stopped sending me WordPress projects as well.\n\nI no longer even offer WordPress as an option.\n\nHere is why I stopped using WordPress and why you might want to do the same. I am not alone either. On forums like Reddit, dozens of other developers are ditching it for the same reasons:\n\n- **They are just faster.** No endless plugin updates, no PHP errors. You can go from idea to live site in hours instead of weeks.\n\n- **Design freedom without the mess.** No fighting against theme templates or WordPress‚Äôs outdated block editor. You drag, drop, and tweak until it looks right.\n\n- **No maintenance headaches.** Forget security patches, server migrations, and plugins breaking each other.\n\n- **Better performance out of the box.** Framer and Webflow sites are optimized for speed and SEO from the start.\n\n- **Easier for clients to update.** Clients do not need training. The CMS is visual, not a clunky dashboard full of settings they will never use.\n\n- **Built-in hosting and CDN.** No need to manage hosting providers or set up caching. It is already handled.\n\nAll of these reasons boil down to one simple fact: WordPress adds a lot of unnecessary complexity. Wait until you see the source code of a site built with Elementor, there are extra \u003Ccode>&lt;div&gt;\u003C/code>s everywhere. From bloated HTML full of &lt;div&gt; wrappers to endless plugin conflicts, it slows down development and maintenance. \n\nFramer and Webflow strip all that away, they give you a visual canvas, clean code, and a hosting setup that just works. You focus on building and designing, not wrestling with updates or debugging a broken theme.\n\n**Example: a simple button**\n\n**WordPress (with a page builder like Elementor):**\n\n```html\n\u003Cdiv class=\"elementor-element elementor-element-123 elementor-button-wrapper\">\n  \u003Cdiv class=\"elementor-button-align-wrapper\">\n    \u003Ca href=\"#\" class=\"elementor-button elementor-size-md\">\n      \u003Cspan class=\"elementor-button-content-wrapper\">\n        \u003Cspan class=\"elementor-button-text\">Click Me\u003C/span>\n      \u003C/span>\n    \u003C/a>\n  \u003C/div>\n\u003C/div>\n```\n\nFramer/Webflow equivalent (clean and minimal):\n\n```html\n\u003Ca href=\"#\" class=\"button\">Click Me\u003C/a>\n```\n\nFor developers tired of fighting the WordPress ecosystem, switching to Framer or Webflow simply makes building and maintaining sites easier.\n\n## When SaaS Tools Make Sense\n\nI get why some developers don‚Äôt want to use SaaS platforms, some even turn down clients who ask for them.\n\nAs one Redditor put it:\n\n> ‚ÄúWe pass on clients who want to use a SaaS platform. They're generally not serious about marketing the site or don‚Äôt see the value in having control of the code. Either way, that's not a good fit for us.‚Äù\n\nAnd another added:\n\n> ‚ÄúWhy work with someone else‚Äôs limitations that you‚Äôre going to get blamed for? No thanks.‚Äù\n\nYes, there can be other problems too. Plans can change, pricing can spike. But for a large portion of the web design market, these tools are a solid alternative to WordPress and they simplify your life.\n\nAnd if things ever go south, you can always migrate to a more code-controlled option like Next.js or Astro.js.\n\n**Happy building.**\n\nThis is Leandro... signing off from the USCSS Sulaco.\n\n![](/media/blog/framer-and-webflow-took-over-my-client-requests/27162653a5fdd69aea9b77c83f14d7975588d0ef.webp)","src/content/blog/framer-and-webflow-took-over-my-client-requests.md","4eb2860bf6974764",{"html":349,"metadata":350},"\u003Cp>For years, almost every project I worked on started the same way.\u003C/p>\n\u003Cp>The design agency would send me the designs or the changes they wanted to make to a site, and I would implement them in WordPress, go through feedback, revisions, and then delivery.\u003C/p>\n\u003Cp>‚ÄúCan you update the header and add a form?‚Äù Two hours later, I was still wrestling with a bloated theme, outdated plugins, and a dashboard that looked like it had not been touched since 2012.\u003C/p>\n\u003Cp>The most difficult case was a site where the home page was split into four moving sections. It was not customizable at all and required major changes. On top of that, it was difficult to update because the theme‚Äôs name was already taken by another template, which caused conflicts.\u003C/p>\n\u003Cp>I got tired of wrestling with WordPress themes. Every ‚Äúsimple‚Äù change turned into a scavenger hunt through template overrides, hooks, and endless CSS tweaks. Change one thing, and three other things would break. It felt less like customization and more like defusing a bomb while blindfolded.\u003C/p>\n\u003Cp>So I decided to switch to something better. I first tried Wix.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-and-webflow-took-over-my-client-requests/2025-08-13-00-49-03-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>Although I like Squarespace more, it does not have a free plan.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-and-webflow-took-over-my-client-requests/2025-08-13-00-50-25-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>I learned from some YouTube tutorials and published a gig on Fiverr.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-and-webflow-took-over-my-client-requests/2025-08-13-00-52-09-image.webp\" alt=\"\">\u003C/p>\n\u003Cp>It was my first gig on Fiverr. I landed it after a month, for someone in Israel. A simple mockup for $20.\u003C/p>\n\u003Cp>But I did not like it much. It was hard to make templates and customize them.\u003C/p>\n\u003Cp>Then I discovered some YouTube videos about Webflow, so I tried learning it with a Udemy course from an instructor named Vako Shvili.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-and-webflow-took-over-my-client-requests/61250540f4bb236999a00bd3a8ac81567c8f090c.webp\" alt=\"\">\u003C/p>\n\u003Cp>I never even started half of the Udemy courses I bought.\u003C/p>\n\u003Cp>There was also Framer. Many designers I follow on X use it because it is no-code, simpler than Webflow, and quite similar. With just a few videos from Framer University and some YouTubers, you can already start building.\u003C/p>\n\u003Cp>I did the same as I had done with Wix: I posted gigs for Webflow and Framer, alongside my WordPress and design gigs.\u003C/p>\n\u003Cp>Then something changed.\u003C/p>\n\u003Cp>One client asked for Webflow.\u003Cbr>\nAnother requested Framer.\u003C/p>\n\u003Cp>My first paid Webflow gig was for a German site, meetovo.com.\u003C/p>\n\u003Cp>They initially asked me to integrate Swiper.js, then to create a Figma prototype, a set of dashboards with new features for their HR web app, and finally, to design social media content. I turned down the social media role because I wasn‚Äôt comfortable with their style, so I focused solely on the dashboards and the prototype with all the new interactions.\u003C/p>\n\u003Cp>After that, I didn‚Äôt hear from them again.\u003C/p>\n\u003Cp>Before long, nobody was asking for WordPress anymore.\u003C/p>\n\u003Cp>I took the opportunity to finally remove all my WordPress gigs, and the agency I worked with stopped sending me WordPress projects as well.\u003C/p>\n\u003Cp>I no longer even offer WordPress as an option.\u003C/p>\n\u003Cp>Here is why I stopped using WordPress and why you might want to do the same. I am not alone either. On forums like Reddit, dozens of other developers are ditching it for the same reasons:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>They are just faster.\u003C/strong> No endless plugin updates, no PHP errors. You can go from idea to live site in hours instead of weeks.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Design freedom without the mess.\u003C/strong> No fighting against theme templates or WordPress‚Äôs outdated block editor. You drag, drop, and tweak until it looks right.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>No maintenance headaches.\u003C/strong> Forget security patches, server migrations, and plugins breaking each other.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Better performance out of the box.\u003C/strong> Framer and Webflow sites are optimized for speed and SEO from the start.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Easier for clients to update.\u003C/strong> Clients do not need training. The CMS is visual, not a clunky dashboard full of settings they will never use.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Built-in hosting and CDN.\u003C/strong> No need to manage hosting providers or set up caching. It is already handled.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>All of these reasons boil down to one simple fact: WordPress adds a lot of unnecessary complexity. Wait until you see the source code of a site built with Elementor, there are extra \u003Ccode>&#x3C;div>\u003C/code>s everywhere. From bloated HTML full of &#x3C;div> wrappers to endless plugin conflicts, it slows down development and maintenance.\u003C/p>\n\u003Cp>Framer and Webflow strip all that away, they give you a visual canvas, clean code, and a hosting setup that just works. You focus on building and designing, not wrestling with updates or debugging a broken theme.\u003C/p>\n\u003Cp>\u003Cstrong>Example: a simple button\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>WordPress (with a page builder like Elementor):\u003C/strong>\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"elementor-element elementor-element-123 elementor-button-wrapper\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"elementor-button-align-wrapper\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"#\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"elementor-button elementor-size-md\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"elementor-button-content-wrapper\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"elementor-button-text\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Click Me&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>Framer/Webflow equivalent (clean and minimal):\u003C/p>\n\u003Cdiv class=\"relative group\">\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"#\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"button\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Click Me&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>For developers tired of fighting the WordPress ecosystem, switching to Framer or Webflow simply makes building and maintaining sites easier.\u003C/p>\n\u003Ch2 id=\"when-saas-tools-make-sense\">When SaaS Tools Make Sense\u003C/h2>\n\u003Cp>I get why some developers don‚Äôt want to use SaaS platforms, some even turn down clients who ask for them.\u003C/p>\n\u003Cp>As one Redditor put it:\u003C/p>\n\u003Cblockquote>\n\u003Cp>‚ÄúWe pass on clients who want to use a SaaS platform. They‚Äôre generally not serious about marketing the site or don‚Äôt see the value in having control of the code. Either way, that‚Äôs not a good fit for us.‚Äù\u003C/p>\n\u003C/blockquote>\n\u003Cp>And another added:\u003C/p>\n\u003Cblockquote>\n\u003Cp>‚ÄúWhy work with someone else‚Äôs limitations that you‚Äôre going to get blamed for? No thanks.‚Äù\u003C/p>\n\u003C/blockquote>\n\u003Cp>Yes, there can be other problems too. Plans can change, pricing can spike. But for a large portion of the web design market, these tools are a solid alternative to WordPress and they simplify your life.\u003C/p>\n\u003Cp>And if things ever go south, you can always migrate to a more code-controlled option like Next.js or Astro.js.\u003C/p>\n\u003Cp>\u003Cstrong>Happy building.\u003C/strong>\u003C/p>\n\u003Cp>This is Leandro‚Ä¶ signing off from the USCSS Sulaco.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/framer-and-webflow-took-over-my-client-requests/27162653a5fdd69aea9b77c83f14d7975588d0ef.webp\" alt=\"\">\u003C/p>",{"headings":351,"localImagePaths":355,"remoteImagePaths":356,"frontmatter":336,"imagePaths":357},[352],{"depth":100,"slug":353,"text":354},"when-saas-tools-make-sense","When SaaS Tools Make Sense",[],[],[],"framer-and-webflow-took-over-my-client-requests.md"]