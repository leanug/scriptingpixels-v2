[["Map",1,2,7,8,81,82],"meta::meta",["Map",3,4,5,6],"astro-version","5.12.3","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","framer",["Map",9,10,41,42,63,64],"fieldwave",{"id":9,"data":11,"filePath":31,"digest":32,"rendered":33,"legacyId":40},{"title":12,"subtitle":13,"description":14,"note":15,"linkBuy":16,"preview":16,"cover":17,"swap":18,"galleryImg1":18,"galleryImg2":18,"author":19,"slug":9,"type":22,"pages":23,"price":24,"published":25,"featured":25,"stack":26,"updated":27,"category":28},"Fieldwave  - Coming soon","Versatile agency layout for bold brands","A clean, responsive portfolio Framer template perfect for freelancers and creatives.","Fraction of agency cost",null,"cover.webp","coming-soon.png",{"name":20,"avatar":21},"Leandro Ubilla","leandro-profile.png","new",3,49,true,"Framer",["Date","2025-07-15T00:00:00.000Z"],{"label":29,"slug":30},"Agency","agency","src/content/framer/fieldwave.md","7cfb270f2c9cd563",{"html":34,"metadata":35},"",{"headings":36,"localImagePaths":37,"remoteImagePaths":38,"frontmatter":11,"imagePaths":39},[],[],[],[],"fieldwave.md","strata",{"id":41,"data":43,"filePath":54,"digest":55,"rendered":56,"legacyId":62},{"linkBuy":16,"preview":16,"cover":17,"swap":18,"galleryImg1":18,"galleryImg2":18,"title":44,"subtitle":45,"description":46,"note":15,"author":47,"slug":41,"type":22,"pages":48,"price":49,"published":25,"featured":25,"stack":26,"updated":50,"category":51},"Strata - Coming soon","This is the subtitle","A fast, modern Framer template for SaaS startups looking to launch with impact.",{"name":20,"avatar":21},7,0,["Date","2025-07-15T00:00:00.000Z"],{"label":52,"slug":53},"Real Estate","real-estate","src/content/framer/strata.md","913acbfc7727294a",{"html":34,"metadata":57},{"headings":58,"localImagePaths":59,"remoteImagePaths":60,"frontmatter":43,"imagePaths":61},[],[],[],[],"strata.md","summerstone",{"id":63,"data":65,"filePath":72,"digest":73,"rendered":74,"legacyId":80},{"title":66,"subtitle":67,"description":14,"note":15,"linkBuy":16,"preview":16,"cover":17,"swap":18,"galleryImg1":18,"galleryImg2":18,"author":68,"slug":63,"type":22,"pages":23,"price":69,"published":25,"featured":25,"stack":26,"updated":70,"category":71},"Summerstone  - Coming soon","A professional-grade portfolio layout",{"name":20,"avatar":21},99,["Date","2025-07-15T00:00:00.000Z"],{"label":52,"slug":53},"src/content/framer/summerstone.md","7dd4da79ee777ace",{"html":34,"metadata":75},{"headings":76,"localImagePaths":77,"remoteImagePaths":78,"frontmatter":65,"imagePaths":79},[],[],[],[],"summerstone.md","blog",["Map",83,84,125,126,180,181,204,205],"mastering-nextjs-form-handling",{"id":83,"data":85,"body":95,"filePath":96,"digest":97,"rendered":98,"legacyId":124},{"author":20,"avatar":21,"image":86,"title":87,"description":88,"date":89,"tags":90,"slug":83,"published":94,"featured":94},"placeholder.svg","Mastering Next.js Form Handling","Dive into Next.js form handling! Learn about HTML validation, handling input resets with useActionState, and implementing server-side validation efficiently.",["Date","2025-01-17T00:00:00.000Z"],[91,92,93],"Next.js","Forms","Web Development",false,"Let's explore how to handle form management in Next.js, from HTML form validation to managing input resets with useActionState, and efficiently implementing server-side validations.\n\n## HTML Form Validation\n\nTo begin, we'll look at how we can validate forms using HTML validation, which is a straightforward way to ensure form inputs meet certain criteria without needing JavaScript.\n\nBut first, let's start with the Next.js home page. In /src/page.tsx, we have the following code:\n\n```jsx\nimport FeedbackForm from \"@/components/feedback-form\";\n\nexport default function Home() {\n  return (\n    \u003Csection className=\"h-screen w-full flex items-center justify-center bg-yellow-400\">\n      \u003Cdiv className=\"max-w-lg w-full p-6 shadow-md rounded-xl bg-white\">\n        \u003Ch1 className=\"text-2xl font-bold mb-4\">Feedback\u003C/h1>\n        \u003CFeedbackForm />\n      \u003C/div>\n    \u003C/section>\n  );\n}\n```\n\nIn the /src/components directory, create a new file named feedback-form.tsx:\n\n```jsx\n'use client'\n\nimport React, { useActionState, useEffect } from 'react';\nimport { createFeedbackAction } from '@/actions/create-feedback-action';\nimport { FeedbackState } from '@/types';\nimport toast from 'react-hot-toast';\n\nconst initialState:FeedbackState = {\n  message: '',\n  success: false\n}\n \nfunction FeedbackForm() {\n  const [state, formAction, isPending] = useActionState(createFeedbackAction, initialState)\n\n  useEffect(() => {\n    if (!isPending && state?.message) {\n      if (state.success) {\n        toast.success(state.message, {\n          position: 'top-center',\n          duration: 4000,\n        });\n      } else {\n        toast.error(state.message, {\n          position: 'top-center',\n          duration: 4000,\n        });\n      }\n    }\n  }, [isPending, state.message, state.success]);\n\n  return (\n    \u003Cform action={formAction} className=\"space-y-4\">\n      \u003Cdiv className=\"form-control\">\n        \u003Clabel htmlFor=\"email\" className=\"label\">\n          \u003Cspan className=\"label-text\">Email\u003C/span>\n        \u003C/label>\n        \u003Cinput\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          defaultValue={state.formValues?.email || ''}\n          className={`input input-bordered w-full`}\n          minLength={4}\n          maxLength={50}\n        />\n        {state?.errors?.email && (\n          \u003Cspan className=\"text-red-500 text-sm mt-1\">\n            {state?.errors.email[0]}\n          \u003C/span>\n        )}\n      \u003C/div>\n\n      \u003Cdiv className=\"form-control mt-4\">\n        \u003Clabel htmlFor=\"text\" className=\"label\">\n          \u003Cspan className=\"label-text\">Message\u003C/span>\n        \u003C/label>\n        \u003Ctextarea\n          id=\"text\"\n          name=\"text\"\n          defaultValue={state.formValues?.text || ''}\n          rows={4}\n          className=\"textarea textarea-bordered w-full\"\n          minLength={4}\n          maxLength={1000}\n        >\u003C/textarea>\n        {state?.errors?.text && (\n          \u003Cspan className=\"text-red-500 text-sm mt-1\">\n            {state?.errors.text[0]}\n          \u003C/span>\n        )}\n      \u003C/div>\n      \u003Cbutton\n        className=\"btn btn-neutral w-full mt-4\"\n        disabled={isPending}\n      >\n        {isPending ? 'Sending...' : 'Send'}\n      \u003C/button>\n    \u003C/form>\n  )\n}\n```\n\n### Form Component Breakdown: HTML Validation, useEffect, and useActionState\n\nHere’s a detailed look at how the FeedbackForm component manages form handling using HTML validation, useEffect, and useActionState.\n\nInitial State Definition\nThe initialState object sets the baseline for feedback messaging and success status:\n\n```jsx\nconst initialState:FeedbackState = {\n  message: '',\n  success: false\n}\n```\n\nForm State Management with useActionState\nThe useActionState hook manages the form's state and actions:\n\n```jsx\nconst [state, formAction, isPending] = useActionState(createFeedbackAction, initialState)\n```\n\nThis hook helps control the form submission process, tracking whether a submission is pending and updating the state accordingly.\n\nFeedback Display with useEffect\nThe useEffect hook monitors the isPending status and the state object to display success or error messages:\n\n```jsx\nuseEffect(() => {\n  if (!isPending && state?.message) {\n    if (state.success) {\n      toast.success(state.message, {\n        position: 'top-center',\n        duration: 4000,\n      });\n    } else {\n      toast.error(state.message, {\n        position: 'top-center',\n        duration: 4000,\n      });\n    }\n  }\n}, [isPending, state.message, state.success]);\n\nexport default FeedbackForm\n```\n\nThis ensures that users are notified of the outcome after form submission.\n\n### Input Fields with HTML Validation\nThe input fields incorporate basic HTML validation rules using attributes like minLength and maxLength\n\n```jsx\n\u003Cinput\n  id=\"email\"\n  name=\"email\"\n  type=\"email\"\n  defaultValue={state.formValues?.email || ''}\n  className=\"input input-bordered w-full\"\n  minLength={4}\n  maxLength={50}\n/>\n```\n\nThese attributes validate the inputs before the form is submitted.\n\nError Handling for Inputs\nErrors are displayed beneath each input field when validation fails:\n\n```jsx\n{state?.errors?.email && (\n  \u003Cspan className=\"text-red-500 text-sm mt-1\">\n    {state?.errors.email[0]}\n  \u003C/span>\n)}\n```\n\nThe component checks for errors in the state and renders them if present.\n\nSubmit Button Behavior\nThe submit button dynamically reflects the form’s pending state:\n\n```jsx\n\u003Cbutton\n  className=\"btn btn-neutral w-full mt-4\"\n  disabled={isPending}\n>\n  {isPending ? 'Sending...' : 'Send'}\n\u003C/button>\n```\n\nWhen the form is pending, the button displays “Sending…” to indicate the submission process.\n\nThis breakdown showcases how each part of the FeedbackForm component works together to create a smooth form handling experience, leveraging both client-side validation and feedback mechanisms.\n\n## sendFeedbackAction server action\n\nWithin the /src/actions directory, create a new file named send-feedback-action.ts:\n\n```jsx\n'use server'\n\nimport { z } from 'zod' \nimport { connectDB } from \"@/utils/connectDB\"\nimport { FeedbackData, FeedbackState } from '@/types'\nimport { getErrorMessage } from '@/utils/error'\nimport Feedback from \"@/models/feedback\";\n\nexport async function createFeedbackAction(prevState: FeedbackState, formData: FormData) {\n  const schema = z.object({\n    email: z\n      .string()\n      .email({ message: 'Invalid email format' })\n      .nonempty({ message: 'Email is required' })\n      .max(50, { message: 'Email should be at most 50 characters long' }),\n    text: z\n      .string()\n      .min(4, { message: 'Message should be at least 4 characters long' })\n      .nonempty({ message: 'Message is required' })\n      .max(1000, { message: 'Message should be at most 500 characters long' }),\n  })\n  \n  try {\n    const sourceData: FeedbackData = {\n      email: formData.get('email') as string,\n      text: formData.get('text') as string,\n    }\n\n    const validatedFields = schema.safeParse(sourceData);\n\n    if (!validatedFields.success) {\n      return {\n        success: false,\n        message: 'Invalid fields',\n        errors: validatedFields.error.flatten().fieldErrors,\n        formValues: sourceData\n      };\n    }\n    \n    await connectDB()\n\n    await Feedback.create(\n      validatedFields.data\n    )\n\n    return {\n      success: true, \n      message: 'New feedback created' \n    }\n  } catch (error) {\n    console.error(\"Error sending feedback:\", getErrorMessage(error));\n    return {\n      success: false, \n      message: `We couldn't process your feedback. Please try again later.`\n    }\n  }\n}\n```\n\n### sendFeedbackAction Breakdown: Zod Schema Validation and Database Interaction\n\nThe createFeedbackAction function handles form validation and database interactions using Zod schemas and MongoDB.\n\nAs you can see, we extract the error message from the catch block and return a generic error message to the user.\n\ngetErrorMessage(error) is a utility function that extracts the error message from the error object.\n\nThis error is of type unknown by default, it can be a string or an object, so we need to check if it's an object and extract the message property.\n\n```jsx\nexport const getErrorMessage = (error: unknown): string => {\n  let message: string\n\n  if (error instanceof Error) {\n    message = error.message;\n  } else if (error && typeof error === 'object' && 'message' in error) {\n    message = String(error.message);\n  } else if (typeof error === 'string') {\n    message = error;\n  } else {\n    message = 'An unknown error occurred';\n  }\n\n  return message;\n}\n```\n\nNow you can log the error message to the console, send it to your error tracking service, save it to MongoDB, or handle it in any way you prefer, while returning a user-friendly message to the user.\n\n## Conclusion\n\nIn this post, we explored Next.js form handling, covering HTML validation, input resets with useActionState, and efficient server-side validation.","src/content/blog/nextjs-form-handling.md","4127f68f80e0fd0f",{"html":99,"metadata":100},"\u003Cp>Let’s explore how to handle form management in Next.js, from HTML form validation to managing input resets with useActionState, and efficiently implementing server-side validations.\u003C/p>\n\u003Ch2 id=\"html-form-validation\">HTML Form Validation\u003C/h2>\n\u003Cp>To begin, we’ll look at how we can validate forms using HTML validation, which is a straightforward way to ensure form inputs meet certain criteria without needing JavaScript.\u003C/p>\n\u003Cp>But first, let’s start with the Next.js home page. In /src/page.tsx, we have the following code:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> FeedbackForm \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@/components/feedback-form\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Home\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"h-screen w-full flex items-center justify-center bg-yellow-400\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"max-w-lg w-full p-6 shadow-md rounded-xl bg-white\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-2xl font-bold mb-4\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Feedback&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">FeedbackForm\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In the /src/components directory, create a new file named feedback-form.tsx:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">'use client'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React, { useActionState, useEffect } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { createFeedbackAction } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/actions/create-feedback-action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { FeedbackState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/types'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> toast \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-hot-toast'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> initialState\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">FeedbackState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> FeedbackForm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">formAction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">isPending\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useActionState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(createFeedbackAction, initialState)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">isPending \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state?.message) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (state.success) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">success\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [isPending, state.message, state.success]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#B392F0\"> action\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{formAction} \u003C/span>\u003Cspan style=\"color:#B392F0\">className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"space-y-4\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"form-control\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#B392F0\"> htmlFor\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label-text\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Email&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          id\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{state.formValues?.email \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`input input-bordered w-full`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          minLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          maxLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {state?.errors?.email \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-red-500 text-sm mt-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            {state?.errors.email[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"form-control mt-4\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#B392F0\"> htmlFor\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label-text\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Message&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">label\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">textarea\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          id\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{state.formValues?.text \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          rows\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"textarea textarea-bordered w-full\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          minLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          maxLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        >&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">textarea\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {state?.errors?.text \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-red-500 text-sm mt-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            {state?.errors.text[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"btn btn-neutral w-full mt-4\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        disabled\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{isPending}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      >\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {isPending \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Sending...'\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Send'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"form-component-breakdown-html-validation-useeffect-and-useactionstate\">Form Component Breakdown: HTML Validation, useEffect, and useActionState\u003C/h3>\n\u003Cp>Here’s a detailed look at how the FeedbackForm component manages form handling using HTML validation, useEffect, and useActionState.\u003C/p>\n\u003Cp>Initial State Definition\nThe initialState object sets the baseline for feedback messaging and success status:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> initialState\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">FeedbackState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Form State Management with useActionState\nThe useActionState hook manages the form’s state and actions:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">formAction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">isPending\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useActionState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(createFeedbackAction, initialState)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This hook helps control the form submission process, tracking whether a submission is pending and updating the state accordingly.\u003C/p>\n\u003Cp>Feedback Display with useEffect\nThe useEffect hook monitors the isPending status and the state object to display success or error messages:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">isPending \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state?.message) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (state.success) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">success\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.message, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        position: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'top-center'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        duration: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}, [isPending, state.message, state.success]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> FeedbackForm\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This ensures that users are notified of the outcome after form submission.\u003C/p>\n\u003Ch3 id=\"input-fields-with-html-validation\">Input Fields with HTML Validation\u003C/h3>\n\u003Cp>The input fields incorporate basic HTML validation rules using attributes like minLength and maxLength\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{state.formValues?.email \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"input input-bordered w-full\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  minLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  maxLength\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">/>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>These attributes validate the inputs before the form is submitted.\u003C/p>\n\u003Cp>Error Handling for Inputs\nErrors are displayed beneath each input field when validation fails:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{state?.errors?.email \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-red-500 text-sm mt-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {state?.errors.email[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The component checks for errors in the state and renders them if present.\u003C/p>\n\u003Cp>Submit Button Behavior\nThe submit button dynamically reflects the form’s pending state:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"btn btn-neutral w-full mt-4\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  disabled\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{isPending}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {isPending \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Sending...'\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Send'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>When the form is pending, the button displays “Sending…” to indicate the submission process.\u003C/p>\n\u003Cp>This breakdown showcases how each part of the FeedbackForm component works together to create a smooth form handling experience, leveraging both client-side validation and feedback mechanisms.\u003C/p>\n\u003Ch2 id=\"sendfeedbackaction-server-action\">sendFeedbackAction server action\u003C/h2>\n\u003Cp>Within the /src/actions directory, create a new file named send-feedback-action.ts:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">'use server'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { z } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'zod'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { connectDB } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@/utils/connectDB\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { FeedbackData, FeedbackState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/types'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { getErrorMessage } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/utils/error'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Feedback \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@/models/feedback\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> createFeedbackAction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">prevState\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FeedbackState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">formData\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FormData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> schema\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> z.\u003C/span>\u003Cspan style=\"color:#B392F0\">object\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    email: z\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">email\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Invalid email format'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">nonempty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Email is required'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Email should be at most 50 characters long'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text: z\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">min\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Message should be at least 4 characters long'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">nonempty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Message is required'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Message should be at most 500 characters long'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> sourceData\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FeedbackData\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      email: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'email'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      text: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'text'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> validatedFields\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> schema.\u003C/span>\u003Cspan style=\"color:#B392F0\">safeParse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sourceData);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">validatedFields.success) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Invalid fields'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        errors: validatedFields.error.\u003C/span>\u003Cspan style=\"color:#B392F0\">flatten\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().fieldErrors,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        formValues: sourceData\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> connectDB\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Feedback.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      validatedFields.data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'New feedback created'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Error sending feedback:\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">getErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`We couldn't process your feedback. Please try again later.`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"sendfeedbackaction-breakdown-zod-schema-validation-and-database-interaction\">sendFeedbackAction Breakdown: Zod Schema Validation and Database Interaction\u003C/h3>\n\u003Cp>The createFeedbackAction function handles form validation and database interactions using Zod schemas and MongoDB.\u003C/p>\n\u003Cp>As you can see, we extract the error message from the catch block and return a generic error message to the user.\u003C/p>\n\u003Cp>getErrorMessage(error) is a utility function that extracts the error message from the error object.\u003C/p>\n\u003Cp>This error is of type unknown by default, it can be a string or an object, so we need to check if it’s an object and extract the message property.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#B392F0\"> getErrorMessage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> message\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error.message;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'object'\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'message'\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error.message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'string'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    message \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'An unknown error occurred'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> message;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now you can log the error message to the console, send it to your error tracking service, save it to MongoDB, or handle it in any way you prefer, while returning a user-friendly message to the user.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>In this post, we explored Next.js form handling, covering HTML validation, input resets with useActionState, and efficient server-side validation.\u003C/p>",{"headings":101,"localImagePaths":121,"remoteImagePaths":122,"frontmatter":85,"imagePaths":123},[102,106,109,112,115,118],{"depth":103,"slug":104,"text":105},2,"html-form-validation","HTML Form Validation",{"depth":23,"slug":107,"text":108},"form-component-breakdown-html-validation-useeffect-and-useactionstate","Form Component Breakdown: HTML Validation, useEffect, and useActionState",{"depth":23,"slug":110,"text":111},"input-fields-with-html-validation","Input Fields with HTML Validation",{"depth":103,"slug":113,"text":114},"sendfeedbackaction-server-action","sendFeedbackAction server action",{"depth":23,"slug":116,"text":117},"sendfeedbackaction-breakdown-zod-schema-validation-and-database-interaction","sendFeedbackAction Breakdown: Zod Schema Validation and Database Interaction",{"depth":103,"slug":119,"text":120},"conclusion","Conclusion",[],[],[],"nextjs-form-handling.md","how-to-add-a-blog-to-your-framer-project",{"id":125,"data":127,"body":133,"filePath":134,"digest":135,"rendered":136,"legacyId":179},{"author":20,"avatar":128,"image":17,"title":129,"description":130,"date":131,"category":132,"slug":125,"published":25,"featured":25,"pinned":25},"leandro-ubilla.webp","How to Add a Blog to Your Framer Project","Learn how to add a fully functional blog to your Framer site from scratch.",["Date","2025-07-23T00:00:00.000Z"],{"label":26,"slug":7},"## Table of Contents\n\n- [How to add a blog to a blank project](#how-to-add-a-blog-to-a-blank-project)  \n- [How to add a blog to a project with the CMS already set up](#how-to-add-a-blog-to-a-project-with-the-cms-already-set-up)\n\n\n## Starting with a blank Framer project? No problem.\n\nIf your template doesn’t include a blog by default, you'll need to set things up manually. That means creating your own CMS items from scratch, but don’t worry, it’s simpler than it sounds.\n\nIn this quick guide, I’ll walk you through how to add a blog to any Framer site, even if your starting point is completely empty.\n\n![Framer add blog button](/media/blog/how-to-add-a-blog-to-your-framer-project/1.webp)\n\nWe’re starting with a blank canvas.\nHead over to the CMS panel and click “Add Blog.”\nFramer will automatically create two collections for you:\none for your blog posts, and one for blog categories.\n\n## Why Are Categories and Blog Posts Stored Separately?\n\nWhen building a blog or CMS, you’ll often see that categories and blog posts are managed as separate collections. Here’s why:\n\n### Better Organization & Reusability  \nCategories act like labels or folders for your posts. By keeping them separate, you can easily add, edit, or remove categories without touching individual blog posts.  \nThis means if you want to rename or restructure a category, you do it once, and all posts under that category update automatically.\n\n### Faster Queries & Performance  \nSeparating categories allows the system to fetch posts and categories independently.  \nFor example, when showing a list of categories, the CMS doesn’t have to scan through every post, improving speed and scalability.\n\n### Cleaner Data Structure  \nPosts contain their own content, metadata, images, and links. Categories are simpler objects with just a name and maybe a description or slug.  \nSeparating these keeps your database or content files cleaner and easier to maintain.\n\n### More Flexibility in Design & Filtering  \nSince categories are their own entities, you can build dynamic filters, menus, or tag clouds that update based on category data, without needing to parse through posts every time.\n\nAnd now we get 4 categories and 5 blog posts\n\n![Blog posts and categories created for us by Framer](/media/blog/how-to-add-a-blog-to-your-framer-project/2.webp)\n\nNow, if we click **Back**, we can see this:\n\n![Framer left menu showing the pages list](/media/blog/how-to-add-a-blog-to-your-framer-project/3.webp)\n\n## After Creating the Blog\n\nOnce you create your blog CMS collection in Framer, your site structure automatically expands. You get:\n\n- **Home** – Your main landing page, the front door of your site.\n\n- **/blog** – A dynamic CMS route that lists all your articles. This is the URL where all your articles will be shown, for example, `yourdomain.com/blog`.\n\nAnd under `/blog`, you'll see something like:\n\n- **Articles • 5** – This shows you have 5 blog posts in your CMS, each one pulling from your collection.\n\n✅ Clean structure  \n✅ SEO-ready  \n✅ Scalable as hell\n\nNow you're set to start dropping knowledge bombs.\n\n## How to add a blog to a project with the CMS already set up\n\nIf you're using a template or working on a project where the CMS is already set up, you might not see the Add Blog button in the CMS panel. In that case, there's a simple workaround.\n\n![Framer left menu no new blog option](/media/blog/how-to-add-a-blog-to-your-framer-project/16.webp)\n\nGo back to the Framer dashboard, create a new blank project, and follow the same steps to add a blog. Once it's created, you can copy the CMS structure into your main project.\n\n![Framer dashboard new project](/media/blog/how-to-add-a-blog-to-your-framer-project/15.webp)\n\nWith this new blank project open, create a new blog by following the steps from the first section of this post.\n\nNext, head over to the CMS tab.\n\n![Framer dashboard CMS tab](/media/blog/how-to-add-a-blog-to-your-framer-project/5.webp)\n\nIn the CMS tab, right-click **Articles** and choose **Copy**.\n\n![Framer dashboard copy collection](/media/blog/how-to-add-a-blog-to-your-framer-project/4.webp)\n\nGo to the Framer dashboard and open your target project. In my case, I’m using the one from the micro animations tutorial.\n\n![Framer dashboard project](/media/blog/how-to-add-a-blog-to-your-framer-project/19.webp)\n\nIn the CMS tab, right-click anywhere on the left panel (don’t click on any of the collections) and choose Paste.\nCategories will be included automatically, no need to copy them separately.\n\n![Framer dashboard paste collection](/media/blog/how-to-add-a-blog-to-your-framer-project/17.webp)\n\nAs you can see, all the data has been copied from the other project into this one, so you don’t have to waste time setting up all the fields for your Blog or Categories collections.\n\n![Framer dashboard articles and categories collections](/media/blog/how-to-add-a-blog-to-your-framer-project/18.webp)\n\n## ✅ Done. What’s Next?\n\nAs you can see, you just saved a ton of time.\n\nNo rebuilding collections. No messing with field types. No wondering what you forgot.\n\nYou’ve now got a fully functional blog, complete with posts, categories, and a clean URL structure, ready to go.\n\n### This gives you:\n\nA scalable setup you can keep adding to\n\nBetter SEO right out of the gate\n\nLess time fiddling, more time publishing\n\n### Next step? Start writing.\n\nEven if it’s just one article a week, it compounds.\n\nYour blog is now a growth engine. Don’t let it sit idle.","src/content/blog/how-to-add-a-blog-to-your-framer-project.md","bc7ca4a05d8cd7b0",{"html":137,"metadata":138},"\u003Ch2 id=\"table-of-contents\">Table of Contents\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#how-to-add-a-blog-to-a-blank-project\">How to add a blog to a blank project\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#how-to-add-a-blog-to-a-project-with-the-cms-already-set-up\">How to add a blog to a project with the CMS already set up\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"starting-with-a-blank-framer-project-no-problem\">Starting with a blank Framer project? No problem.\u003C/h2>\n\u003Cp>If your template doesn’t include a blog by default, you’ll need to set things up manually. That means creating your own CMS items from scratch, but don’t worry, it’s simpler than it sounds.\u003C/p>\n\u003Cp>In this quick guide, I’ll walk you through how to add a blog to any Framer site, even if your starting point is completely empty.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/1.webp\" alt=\"Framer add blog button\">\u003C/p>\n\u003Cp>We’re starting with a blank canvas.\nHead over to the CMS panel and click “Add Blog.”\nFramer will automatically create two collections for you:\none for your blog posts, and one for blog categories.\u003C/p>\n\u003Ch2 id=\"why-are-categories-and-blog-posts-stored-separately\">Why Are Categories and Blog Posts Stored Separately?\u003C/h2>\n\u003Cp>When building a blog or CMS, you’ll often see that categories and blog posts are managed as separate collections. Here’s why:\u003C/p>\n\u003Ch3 id=\"better-organization--reusability\">Better Organization &#x26; Reusability\u003C/h3>\n\u003Cp>Categories act like labels or folders for your posts. By keeping them separate, you can easily add, edit, or remove categories without touching individual blog posts.\u003Cbr>\nThis means if you want to rename or restructure a category, you do it once, and all posts under that category update automatically.\u003C/p>\n\u003Ch3 id=\"faster-queries--performance\">Faster Queries &#x26; Performance\u003C/h3>\n\u003Cp>Separating categories allows the system to fetch posts and categories independently.\u003Cbr>\nFor example, when showing a list of categories, the CMS doesn’t have to scan through every post, improving speed and scalability.\u003C/p>\n\u003Ch3 id=\"cleaner-data-structure\">Cleaner Data Structure\u003C/h3>\n\u003Cp>Posts contain their own content, metadata, images, and links. Categories are simpler objects with just a name and maybe a description or slug.\u003Cbr>\nSeparating these keeps your database or content files cleaner and easier to maintain.\u003C/p>\n\u003Ch3 id=\"more-flexibility-in-design--filtering\">More Flexibility in Design &#x26; Filtering\u003C/h3>\n\u003Cp>Since categories are their own entities, you can build dynamic filters, menus, or tag clouds that update based on category data, without needing to parse through posts every time.\u003C/p>\n\u003Cp>And now we get 4 categories and 5 blog posts\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/2.webp\" alt=\"Blog posts and categories created for us by Framer\">\u003C/p>\n\u003Cp>Now, if we click \u003Cstrong>Back\u003C/strong>, we can see this:\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/3.webp\" alt=\"Framer left menu showing the pages list\">\u003C/p>\n\u003Ch2 id=\"after-creating-the-blog\">After Creating the Blog\u003C/h2>\n\u003Cp>Once you create your blog CMS collection in Framer, your site structure automatically expands. You get:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Home\u003C/strong> – Your main landing page, the front door of your site.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>/blog\u003C/strong> – A dynamic CMS route that lists all your articles. This is the URL where all your articles will be shown, for example, \u003Ccode>yourdomain.com/blog\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>And under \u003Ccode>/blog\u003C/code>, you’ll see something like:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Articles • 5\u003C/strong> – This shows you have 5 blog posts in your CMS, each one pulling from your collection.\u003C/li>\n\u003C/ul>\n\u003Cp>✅ Clean structure\u003Cbr>\n✅ SEO-ready\u003Cbr>\n✅ Scalable as hell\u003C/p>\n\u003Cp>Now you’re set to start dropping knowledge bombs.\u003C/p>\n\u003Ch2 id=\"how-to-add-a-blog-to-a-project-with-the-cms-already-set-up\">How to add a blog to a project with the CMS already set up\u003C/h2>\n\u003Cp>If you’re using a template or working on a project where the CMS is already set up, you might not see the Add Blog button in the CMS panel. In that case, there’s a simple workaround.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/16.webp\" alt=\"Framer left menu no new blog option\">\u003C/p>\n\u003Cp>Go back to the Framer dashboard, create a new blank project, and follow the same steps to add a blog. Once it’s created, you can copy the CMS structure into your main project.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/15.webp\" alt=\"Framer dashboard new project\">\u003C/p>\n\u003Cp>With this new blank project open, create a new blog by following the steps from the first section of this post.\u003C/p>\n\u003Cp>Next, head over to the CMS tab.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/5.webp\" alt=\"Framer dashboard CMS tab\">\u003C/p>\n\u003Cp>In the CMS tab, right-click \u003Cstrong>Articles\u003C/strong> and choose \u003Cstrong>Copy\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/4.webp\" alt=\"Framer dashboard copy collection\">\u003C/p>\n\u003Cp>Go to the Framer dashboard and open your target project. In my case, I’m using the one from the micro animations tutorial.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/19.webp\" alt=\"Framer dashboard project\">\u003C/p>\n\u003Cp>In the CMS tab, right-click anywhere on the left panel (don’t click on any of the collections) and choose Paste.\nCategories will be included automatically, no need to copy them separately.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/17.webp\" alt=\"Framer dashboard paste collection\">\u003C/p>\n\u003Cp>As you can see, all the data has been copied from the other project into this one, so you don’t have to waste time setting up all the fields for your Blog or Categories collections.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/how-to-add-a-blog-to-your-framer-project/18.webp\" alt=\"Framer dashboard articles and categories collections\">\u003C/p>\n\u003Ch2 id=\"-done-whats-next\">✅ Done. What’s Next?\u003C/h2>\n\u003Cp>As you can see, you just saved a ton of time.\u003C/p>\n\u003Cp>No rebuilding collections. No messing with field types. No wondering what you forgot.\u003C/p>\n\u003Cp>You’ve now got a fully functional blog, complete with posts, categories, and a clean URL structure, ready to go.\u003C/p>\n\u003Ch3 id=\"this-gives-you\">This gives you:\u003C/h3>\n\u003Cp>A scalable setup you can keep adding to\u003C/p>\n\u003Cp>Better SEO right out of the gate\u003C/p>\n\u003Cp>Less time fiddling, more time publishing\u003C/p>\n\u003Ch3 id=\"next-step-start-writing\">Next step? Start writing.\u003C/h3>\n\u003Cp>Even if it’s just one article a week, it compounds.\u003C/p>\n\u003Cp>Your blog is now a growth engine. Don’t let it sit idle.\u003C/p>",{"headings":139,"localImagePaths":176,"remoteImagePaths":177,"frontmatter":127,"imagePaths":178},[140,143,146,149,152,155,158,161,164,167,170,173],{"depth":103,"slug":141,"text":142},"table-of-contents","Table of Contents",{"depth":103,"slug":144,"text":145},"starting-with-a-blank-framer-project-no-problem","Starting with a blank Framer project? No problem.",{"depth":103,"slug":147,"text":148},"why-are-categories-and-blog-posts-stored-separately","Why Are Categories and Blog Posts Stored Separately?",{"depth":23,"slug":150,"text":151},"better-organization--reusability","Better Organization & Reusability",{"depth":23,"slug":153,"text":154},"faster-queries--performance","Faster Queries & Performance",{"depth":23,"slug":156,"text":157},"cleaner-data-structure","Cleaner Data Structure",{"depth":23,"slug":159,"text":160},"more-flexibility-in-design--filtering","More Flexibility in Design & Filtering",{"depth":103,"slug":162,"text":163},"after-creating-the-blog","After Creating the Blog",{"depth":103,"slug":165,"text":166},"how-to-add-a-blog-to-a-project-with-the-cms-already-set-up","How to add a blog to a project with the CMS already set up",{"depth":103,"slug":168,"text":169},"-done-whats-next","✅ Done. What’s Next?",{"depth":23,"slug":171,"text":172},"this-gives-you","This gives you:",{"depth":23,"slug":174,"text":175},"next-step-start-writing","Next step? Start writing.",[],[],[],"how-to-add-a-blog-to-your-framer-project.md","my-first-two-weeks-making-coding-videos",{"id":180,"data":182,"body":190,"filePath":191,"digest":192,"rendered":193,"legacyId":203},{"author":20,"avatar":128,"image":17,"title":183,"description":184,"date":185,"tags":186,"slug":180,"published":25,"featured":94,"pinned":94},"My First Two Weeks Making Coding YouTube Videos","In this post, I share the highs and lows of my first two weeks as a YouTube content creator. From struggling with thumbnails to improving audio quality 🎬",["Date","2024-10-17T00:00:00.000Z"],[187,188,189],"Content Creation","YouTube","Journey","## Content Creator's Log, Stardate: 2024.10.17. The mission to grow a YouTube channel continues... no sign of views, but the journey goes on.\n\nThe first few weeks were tough. My first video took way longer than expected. \n\nI had to learn how to make thumbnails 🎨, and I didn&apos;t realize it was something that required so much time. \n\nThe audio in my videos still sounds pretty bad, especially the first one, which is over 20 minutes long 🎧. \n\nRecently, for my fourth video, I learned how to clean up the audio with Audacity 🎙️. \n\nNow, it sounds a lot better—normalizing, reducing the echo, and boosting the volume in Kdenlive because it was too quiet. \n\nAs comrade Anatoly Dyatlov would say: Not great, not terrible 💬.\n\n![Anatoly Dyatlov: Not great, not terrible](/media/blog/my-first-two-weeks-making-coding-videos/dyatlov.webp)\n\nThere&apos;s still room for improvement, though.\n\nThe channel&apos;s analytics 📊 are really poor. I knew it was going to be hard, but not this hard. \n\nAt this rate, I&apos;ll reach monetization by the time I retire 😅.\n\nMy last video about localStorage was seen by 2 people, and one of them was me 😂. \n\nAnyway, time to go back to editing, pretending I have an audience. See you in the next log, if anyone’s out there.","src/content/blog/my-first-two-weeks-as-a-content-creator copy.md","dac4b40d5f9080c7",{"html":194,"metadata":195},"\u003Ch2 id=\"content-creators-log-stardate-20241017-the-mission-to-grow-a-youtube-channel-continues-no-sign-of-views-but-the-journey-goes-on\">Content Creator’s Log, Stardate: 2024.10.17. The mission to grow a YouTube channel continues… no sign of views, but the journey goes on.\u003C/h2>\n\u003Cp>The first few weeks were tough. My first video took way longer than expected.\u003C/p>\n\u003Cp>I had to learn how to make thumbnails 🎨, and I didn’t realize it was something that required so much time.\u003C/p>\n\u003Cp>The audio in my videos still sounds pretty bad, especially the first one, which is over 20 minutes long 🎧.\u003C/p>\n\u003Cp>Recently, for my fourth video, I learned how to clean up the audio with Audacity 🎙️.\u003C/p>\n\u003Cp>Now, it sounds a lot better—normalizing, reducing the echo, and boosting the volume in Kdenlive because it was too quiet.\u003C/p>\n\u003Cp>As comrade Anatoly Dyatlov would say: Not great, not terrible 💬.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/blog/my-first-two-weeks-making-coding-videos/dyatlov.webp\" alt=\"Anatoly Dyatlov: Not great, not terrible\">\u003C/p>\n\u003Cp>There’s still room for improvement, though.\u003C/p>\n\u003Cp>The channel’s analytics 📊 are really poor. I knew it was going to be hard, but not this hard.\u003C/p>\n\u003Cp>At this rate, I’ll reach monetization by the time I retire 😅.\u003C/p>\n\u003Cp>My last video about localStorage was seen by 2 people, and one of them was me 😂.\u003C/p>\n\u003Cp>Anyway, time to go back to editing, pretending I have an audience. See you in the next log, if anyone’s out there.\u003C/p>",{"headings":196,"localImagePaths":200,"remoteImagePaths":201,"frontmatter":182,"imagePaths":202},[197],{"depth":103,"slug":198,"text":199},"content-creators-log-stardate-20241017-the-mission-to-grow-a-youtube-channel-continues-no-sign-of-views-but-the-journey-goes-on","Content Creator’s Log, Stardate: 2024.10.17. The mission to grow a YouTube channel continues… no sign of views, but the journey goes on.",[],[],[],"my-first-two-weeks-as-a-content-creator copy.md","why-mapping-api-data-is-crucial",{"id":204,"data":206,"body":212,"filePath":213,"digest":214,"rendered":215,"legacyId":234},{"author":20,"avatar":128,"image":17,"title":207,"description":208,"date":209,"tags":210,"slug":204,"published":25,"featured":25},"Why Mapping API Data is Crucial for Web Development","This post walks you through a basic mapping function that will streamline your data handling.",["Date","2024-05-10T00:00:00.000Z"],[211],"JavaScript","Mapping data from an API is an essential step for several reasons, \nespecially when you're dealing with web development and interacting \nwith third-party services. Here's why:\n\n## 1. Clean and Consistent Data Structure\n\nHere's the deal: When you're pulling data from an API, it's not always in the format you need.\n\nSometimes, APIs return bloated, nested objects with way more information than you care about. \n\nThat's where mapping comes in. \n\nFor instance, let's look at some user data from [https://fakestoreapi.com/](https://fakestoreapi.com/)\n\nWe are gonna get some user data, but mapped it in a way that some of the user data gets lefted out.\n\nWhen you hit this endpoint https://fakestoreapi.com/users you get a list of users with all sorts of info. \nHere's an example of one user object:\n\n```js showLineNumbers\n[\n   {\n      \"address\": {\n         \"geolocation\": {\n            \"lat\": \"-37.3159\",\n            \"long\": \"81.1496\"\n         },\n         \"city\": \"kilcoole\",\n         \"street\": \"new road\",\n         \"number\": 7682,\n         \"zipcode\": \"12926-3874\"\n      },\n      \"id\": 1,\n      \"email\": \"john@gmail.com\",\n      \"username\": \"johnd\",\n      \"password\": \"m38rmF$\",\n      \"name\": {\n         \"firstname\": \"john\",\n         \"lastname\": \"doe\"\n      },\n      \"phone\": \"1-570-236-7033\",\n      \"__v\": 0\n   }\n]\n```\n\nLet's define the type of the user\n\n```js showLineNumbers\ntype User = {\n  address: {\n    city: string;\n    street: string;\n    number: number;\n    zipcode: string;\n  };\n  id: number;\n  email: string;\n  username: string;\n  name: {\n    firstname: string;\n    lastname: string;\n  };\n  phone: string;\n};\n```\n\nAnd this is the type for the filtered user. ***USE TYPESCRIPT*** 👈\n\n```js showLineNumbers\ntype FilteredUser = {\n  id: string;\n  email: string;\n  username: string;\n  name: {\n    firstname: string;\n    lastname: string;\n  };\n  address: {\n    city: string;\n    street: string;\n    zipcode: string;\n  };\n};\n```\n\nThis is the function for mapping the user data\n\n```js showLineNumbers\n// Function to filter out unwanted fields\nfunction filterUserData(users: User[]): FilteredUser[] {\n  return users.map(({ id, email, username, name, address }) => ({\n    id: '' + id, // number to string\n    email,\n    username,\n    name: {\n      firstname: name.firstname,\n      lastname: name.lastname,\n    },\n    address: {\n      city: address.city,\n      street: address.street,\n      zipcode: address.zipcode,\n    },\n  }));\n}\n```\n\n## 2. Decoupling\n\nSometimes, APIs change.\n\nWhen that happens, do you want to rewrite your entire app? Nope.\n\nWith mapped data, you're decoupling your app from the API. \n\nIf the API response changes, you just tweak your mapping logic instead of ripping apart \nyour whole codebase.\n\n**Save yourself from a world of pain.**\n\n![You are entering a world of pain - Walter - The big lebowsky](/blog/01-why-mapping-api-data-is-crucial/world-of-pain-walter-min.png)\n\nIf the API changes its response structure or fields, you can adjust the mapping \nlogic rather than **refactoring the entire app**.\n\n## 3. Performance\n\nMore data = more problems. \n\nBy mapping your data, you cut down on the size of the payload you're passing around. \n\nThis boosts performance and makes your app faster.\n\nInstead of dragging around unnecessary fields, just map what you need.\n\n## 4. Error Handling: Catch Errors Before They Wreak Havoc\n\nWhen mapping, you can intercept missing fields or errors in the API response. \n\nThat way, you can fix them before they break your app and ruin the user experience.","src/content/blog/why-mapping-api-data-is-crucial.md","1236df286b2ae70d",{"html":216,"metadata":217},"\u003Cp>Mapping data from an API is an essential step for several reasons,\nespecially when you’re dealing with web development and interacting\nwith third-party services. Here’s why:\u003C/p>\n\u003Ch2 id=\"1-clean-and-consistent-data-structure\">1. Clean and Consistent Data Structure\u003C/h2>\n\u003Cp>Here’s the deal: When you’re pulling data from an API, it’s not always in the format you need.\u003C/p>\n\u003Cp>Sometimes, APIs return bloated, nested objects with way more information than you care about.\u003C/p>\n\u003Cp>That’s where mapping comes in.\u003C/p>\n\u003Cp>For instance, let’s look at some user data from \u003Ca href=\"https://fakestoreapi.com/\">https://fakestoreapi.com/\u003C/a>\u003C/p>\n\u003Cp>We are gonna get some user data, but mapped it in a way that some of the user data gets lefted out.\u003C/p>\n\u003Cp>When you hit this endpoint \u003Ca href=\"https://fakestoreapi.com/users\">https://fakestoreapi.com/users\u003C/a> you get a list of users with all sorts of info.\nHere’s an example of one user object:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"address\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"geolocation\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"lat\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-37.3159\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"long\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"81.1496\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">         },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"city\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"kilcoole\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"street\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"new road\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"number\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">7682\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"zipcode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"12926-3874\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"john@gmail.com\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"username\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"johnd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"password\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"m38rmF$\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"firstname\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"john\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">         \"lastname\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"doe\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"phone\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1-570-236-7033\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"__v\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Let’s define the type of the user\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  address\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    city\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    street\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    number\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    zipcode\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  email\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  username\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  name\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    firstname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    lastname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  phone\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And this is the type for the filtered user. \u003Cem>\u003Cstrong>USE TYPESCRIPT\u003C/strong>\u003C/em> 👈\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> FilteredUser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  email\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  username\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  name\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    firstname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    lastname\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  address\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    city\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    street\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    zipcode\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is the function for mapping the user data\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Function to filter out unwanted fields\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> filterUserData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">users\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[])\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> FilteredUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">email\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">username\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">address\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id, \u003C/span>\u003Cspan style=\"color:#6A737D\">// number to string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    email,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    name: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      firstname: name.firstname,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      lastname: name.lastname,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    address: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      city: address.city,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      street: address.street,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      zipcode: address.zipcode,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-decoupling\">2. Decoupling\u003C/h2>\n\u003Cp>Sometimes, APIs change.\u003C/p>\n\u003Cp>When that happens, do you want to rewrite your entire app? Nope.\u003C/p>\n\u003Cp>With mapped data, you’re decoupling your app from the API.\u003C/p>\n\u003Cp>If the API response changes, you just tweak your mapping logic instead of ripping apart\nyour whole codebase.\u003C/p>\n\u003Cp>\u003Cstrong>Save yourself from a world of pain.\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"/blog/01-why-mapping-api-data-is-crucial/world-of-pain-walter-min.png\" alt=\"You are entering a world of pain - Walter - The big lebowsky\">\u003C/p>\n\u003Cp>If the API changes its response structure or fields, you can adjust the mapping\nlogic rather than \u003Cstrong>refactoring the entire app\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"3-performance\">3. Performance\u003C/h2>\n\u003Cp>More data = more problems.\u003C/p>\n\u003Cp>By mapping your data, you cut down on the size of the payload you’re passing around.\u003C/p>\n\u003Cp>This boosts performance and makes your app faster.\u003C/p>\n\u003Cp>Instead of dragging around unnecessary fields, just map what you need.\u003C/p>\n\u003Ch2 id=\"4-error-handling-catch-errors-before-they-wreak-havoc\">4. Error Handling: Catch Errors Before They Wreak Havoc\u003C/h2>\n\u003Cp>When mapping, you can intercept missing fields or errors in the API response.\u003C/p>\n\u003Cp>That way, you can fix them before they break your app and ruin the user experience.\u003C/p>",{"headings":218,"localImagePaths":231,"remoteImagePaths":232,"frontmatter":206,"imagePaths":233},[219,222,225,228],{"depth":103,"slug":220,"text":221},"1-clean-and-consistent-data-structure","1. Clean and Consistent Data Structure",{"depth":103,"slug":223,"text":224},"2-decoupling","2. Decoupling",{"depth":103,"slug":226,"text":227},"3-performance","3. Performance",{"depth":103,"slug":229,"text":230},"4-error-handling-catch-errors-before-they-wreak-havoc","4. Error Handling: Catch Errors Before They Wreak Havoc",[],[],[],"why-mapping-api-data-is-crucial.md"]